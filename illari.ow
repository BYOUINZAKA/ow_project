设置
{
	主程序
	{
		模式名称: "AI illari - AH5N3W"
	}

	大厅
	{
		地图轮换: 完成比赛后
		比赛语音聊天: 启用
		玩家上限 队伍1: 4
		玩家上限 队伍2: 4
		返回大厅: 从不
	}

	模式
	{
		攻防作战
		{
			游戏模式开始: 即时
			重装职责被动生命值加成: 始终启用
		}

		综合
		{
			职责限制: 1重装，2输出，2支援
		}
	}

	英雄
	{
		综合
		{
			禁用英雄
			{
				探奇
				朱诺
				毛加
			}
		}
	}

	扩展
	{
		生成更多机器人
	}
}

变量
{
	全局:
		0: Path_Nodes
		1: Healthkits
		2: Defense_Amount_Desired
		3: Offense_Amount_Desired
		4: Use_Outbrust
		5: ObjectiveA_Nodes
		6: ObjectiveB_Nodes
		7: Defense_Amount_Currently
		8: Offense_Amount_Currently
		9: Chokepoint
		10: Staircase_Top
		11: Staircase_Bottom
		12: Staircase_Middle
		13: Healthkits_Small
		14: Healthkits_Large
		15: Healthkit_Index
		16: Healthkit_CD
		17: Healthkit_Used
		18: Used_Healthkit_Type

	玩家:
		0: Walk_To_Position
		1: Current_Node
		2: Targets
		3: Using_Stairs
		4: Node_Options
		5: Secondary_Charge
		6: Stairs_Index
		7: Walk_Max
		8: Walk_Min
		9: Last_Stair_Type
		10: Node_DePrioritze
		25: Vist_Count
		27: Target_Order
		66: Known_Nodes
		127: Ignore_Lower_Nodes
}

子程序
{
	0: Hanamura
	1: Horizon
	2: Paris
	3: Temple_of_Anubus
	4: Volskaya
	9: Node_Setup
}

规则("------------------------------------------- Made By Spiderman318 | YT Spiderman318 ---------------------------------------")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		调用子程序(Node_Setup);
		全局.Defense_Amount_Desired = 地图工坊设置整数(自定义字符串("AI"), 自定义字符串("Defense Amount"), 1, 0, 5, 2);
		全局.Offense_Amount_Desired = 地图工坊设置整数(自定义字符串("AI"), 自定义字符串("Offense Amount"), 1, 0, 5, 3);
		全局.Use_Outbrust = 地图工坊设置开关(自定义字符串("AI"), 自定义字符串("Outburst"), 真, -2);
	}
}

规则("Use Healthkit")
{
	事件
	{
		玩家受到治疗;
		双方;
		全部;
	}

	条件
	{
		事件为急救包 == 真;
		在重生室中(事件玩家) != 真;
		(所用英雄(治疗者) == 英雄(黑影) || !实体存在(治疗者)) == 真;
	}

	动作
	{
		If(数量(添加至数组(全局.Healthkits_Small, 全局.Healthkits_Large)) == 0);
			修改全局变量(Healthkit_Used, 添加至数组, 首个(已排序的数组(全局.Healthkits, 相距距离(事件玩家, 当前数组元素))));
			修改全局变量(Healthkits, 根据值从数组中移除, 首个(已排序的数组(全局.Healthkits, 相距距离(事件玩家, 当前数组元素))));
			修改全局变量(Healthkit_CD, 添加至数组, 事件治疗 > 75 ? 15 : 10);
			修改全局变量(Used_Healthkit_Type, 添加至数组, 0);
		Else;
			If(数组包含(全局.Healthkits_Small, 首个(已排序的数组(添加至数组(全局.Healthkits_Small, 全局.Healthkits_Large), 相距距离(事件玩家, 当前数组元素)))));
				修改全局变量(Healthkit_Used, 添加至数组, 首个(已排序的数组(全局.Healthkits_Small, 相距距离(事件玩家, 当前数组元素))));
				修改全局变量(Healthkits_Small, 根据值从数组中移除, 首个(已排序的数组(全局.Healthkits_Small, 相距距离(事件玩家, 当前数组元素))));
				修改全局变量(Healthkit_CD, 添加至数组, 10);
				修改全局变量(Used_Healthkit_Type, 添加至数组, 1);
			Else;
				修改全局变量(Healthkit_Used, 添加至数组, 首个(已排序的数组(全局.Healthkits_Large, 相距距离(事件玩家, 当前数组元素))));
				修改全局变量(Healthkits_Large, 根据值从数组中移除, 首个(已排序的数组(全局.Healthkits_Large, 相距距离(事件玩家, 当前数组元素))));
				修改全局变量(Healthkit_CD, 添加至数组, 15);
				修改全局变量(Used_Healthkit_Type, 添加至数组, 2);
			End;
		End;
	}
}

规则("Healthkit Cooldown")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.Healthkit_Used = 空数组;
		全局.Healthkit_CD = 空数组;
		全局.Used_Healthkit_Type = 空数组;
		While(真);
			等待直到 (数量(全局.Healthkit_Used) > 0, 99999);
			For 全局变量(Healthkit_Index, 数量(全局.Healthkit_Used) - 1, -1, -1);
				If(全局.Healthkit_CD[全局.Healthkit_Index] <= 0);
					If(全局.Used_Healthkit_Type[全局.Healthkit_Index] == 1);
						修改全局变量(Healthkits_Small, 添加至数组, 全局.Healthkit_Used[全局.Healthkits]);
					Else If(全局.Used_Healthkit_Type[全局.Healthkit_Index] == 2);
						修改全局变量(Healthkits_Large, 添加至数组, 全局.Healthkit_Used[全局.Healthkits]);
					Else;
						修改全局变量(Healthkits, 添加至数组, 全局.Healthkit_Used[全局.Healthkits]);
					End;
					修改全局变量(Healthkit_Used, 根据索引从数组中移除, 全局.Healthkit_Index);
					修改全局变量(Healthkit_CD, 根据索引从数组中移除, 全局.Healthkit_Index);
					修改全局变量(Used_Healthkit_Type, 根据索引从数组中移除, 全局.Healthkit_Index);
				Else;
					全局.Healthkit_CD[全局.Healthkit_Index] -= 1;
				End;
			End;
			等待(1, 无视条件);
		End;
	}
}

禁用 规则("----------------------------------- AI Communicate ------------------------------------------")
{
	事件
	{
		持续 - 全局;
	}
}

规则("Bot Say Hello")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 问候) == 真;
		是否是机器人(事件玩家) != 真;
	}

	动作
	{
		等待(1, 无视条件);
		交流(已过滤的数组(从数组中移除(所有存活玩家(所在队伍(事件玩家)), 事件玩家), 在视野内(事件玩家, 眼睛位置(当前数组元素), 45) == 真 && 在视线内(眼睛位置(事件玩家), 眼睛位置(当前数组元素), 屏障不会阻挡视线)
			== 真 && 相距距离(事件玩家, 当前数组元素) < 20 && 是否是机器人(当前数组元素)), 问候);
	}
}

规则("Bot Say Need Help")
{
	事件
	{
		玩家受到伤害;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 需要帮助) != 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		交流(事件玩家, 需要帮助);
		等待(8, 无视条件);
	}
}

规则("Bot Say Need Healing")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 需要治疗) != 真;
		是否是机器人(事件玩家) == 真;
		标准化生命值(事件玩家) <= 0.800;
	}

	动作
	{
		交流(事件玩家, 需要治疗);
		等待(8, 无视条件);
		如条件为“真”则循环;
	}
}

规则("Bot Say Understood")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 终极技能状态) == 真;
		是否是机器人(事件玩家) != 真;
		终极技能充能百分比(事件玩家) == 100;
	}

	动作
	{
		交流(已过滤的数组(从数组中移除(所有存活玩家(所在队伍(事件玩家)), 事件玩家), 是否是机器人(当前数组元素)), 收到);
	}
}

规则("Bot Say Thanks")
{
	事件
	{
		玩家受到治疗;
		双方;
		全部;
	}

	条件
	{
		正在交流(事件玩家, 感谢) != 真;
		是否是机器人(事件玩家) == 真;
		治疗者 != 受治疗者;
		实体存在(治疗者) == 真;
	}

	动作
	{
		交流(事件玩家, 感谢);
		等待(8, 无视条件);
	}
}

禁用 规则("----------------------------------- AI Communicate ------------------------------------------")
{
	事件
	{
		持续 - 全局;
	}
}

禁用 规则("----------------------------------- Pathfinder ------------------------------------------")
{
	事件
	{
		持续 - 全局;
	}
}

规则("Pathfind Melee/Jump")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		幅值(阈值(事件玩家)) > 0;
		存活(事件玩家) == 真;
		速度(事件玩家) < 2;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		等待(较大(服务器负载 / 1000, 0.250), 无视条件);
		按下按键(事件玩家, 按钮(跳跃));
		根据条件跳过(实体存在(首个(事件玩家.Target_Order)), 2);
		等待(较大(服务器负载 / 1000, 0.250), 无视条件);
		按下按键(事件玩家, 按钮(近身攻击));
		如条件为“真”则循环;
	}
}

规则("Current Node")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		存活(事件玩家) == 真;
		已重生(事件玩家) == 真;
		事件玩家.Walk_To_Position == 矢量(X方向分量(事件玩家.Walk_To_Position), Y方向分量(事件玩家.Walk_To_Position), Z方向分量(事件玩家.Walk_To_Position));
	}

	动作
	{
		事件玩家.Using_Stairs = 数组包含(添加至数组(添加至数组(全局.Staircase_Middle, 已过滤的数组(全局.Staircase_Bottom, 当前数组元素 != 空)), 全局.Staircase_Top),
			事件玩家.Current_Node) ? 真 : 假;
		根据条件跳过(Y方向分量(所选位置(事件玩家)) + 2.750 >= Y方向分量(事件玩家.Walk_To_Position), 2);
		事件玩家.Ignore_Lower_Nodes = 5;
		持续追踪玩家变量(事件玩家, Ignore_Lower_Nodes, 0, 5, 终点及持续时间);
		If(相距距离(所选位置(事件玩家), 事件玩家.Current_Node) < 3);
			If(事件玩家.Using_Stairs);
				If(数组包含(全局.Staircase_Bottom, 事件玩家.Current_Node));
					事件玩家.Last_Stair_Type = 自定义字符串("Bottom");
				Else If(数组包含(已过滤的数组(全局.Staircase_Middle, 当前数组元素 != 空), 事件玩家.Current_Node));
					事件玩家.Last_Stair_Type = 自定义字符串("Middle");
				Else If(数组包含(已过滤的数组(全局.Staircase_Top, 当前数组元素 != 空), 事件玩家.Current_Node));
					事件玩家.Last_Stair_Type = 自定义字符串("Top");
				End;
			End;
			If(数组包含(事件玩家.Known_Nodes, 事件玩家.Current_Node) != 真);
				修改玩家变量(事件玩家, Known_Nodes, 添加至数组, 事件玩家.Current_Node);
				修改玩家变量(事件玩家, Vist_Count, 添加至数组, 1);
			Else;
				事件玩家.Vist_Count[数组值的索引(事件玩家.Known_Nodes, 事件玩家.Current_Node)] += 1;
			End;
			事件玩家.Node_DePrioritze[数组值的索引(事件玩家.Known_Nodes, 事件玩家.Current_Node)] += 10;
		End;
		事件玩家.Node_Options = 已过滤的数组(添加至数组(添加至数组(全局.Path_Nodes, 添加至数组(添加至数组(全局.ObjectiveA_Nodes, 全局.ObjectiveB_Nodes), 全局.Chokepoint)),
			添加至数组(添加至数组(全局.Staircase_Bottom, 已过滤的数组(全局.Staircase_Middle, 当前数组元素 != 空)), 全局.Staircase_Top)), 事件玩家.Node_DePrioritze[数组值的索引(
			事件玩家.Known_Nodes, 当前数组元素)] <= 9999);
		事件玩家.Node_Options = 已过滤的数组(事件玩家.Node_Options, 相距距离(事件玩家, 当前数组元素) <= 30);
		事件玩家.Node_Options = 已过滤的数组(事件玩家.Node_Options, Y方向分量(所选位置(事件玩家)) + (技能冷却时间(事件玩家, 按钮(技能1)) == 空 && 全局.Use_Outbrust ? 6 : 2.750)
			> Y方向分量(当前数组元素));
		事件玩家.Node_Options = 已过滤的数组(事件玩家.Node_Options, 相距距离(射线命中位置(眼睛位置(事件玩家) + 方向(眼睛位置(事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 1.200),
			眼睛位置(事件玩家) + 方向(眼睛位置(事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 1.200) + 矢量(0, -99, 0), 空, 所有玩家(所有队伍), 假), 眼睛位置(事件玩家) + 方向(
			眼睛位置(事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 1.200)) < 较大(Y方向分量(所选位置(事件玩家)) + 1 - Y方向分量(当前数组元素), 8));
		事件玩家.Node_Options = 已过滤的数组(事件玩家.Node_Options, 相距距离(射线命中位置(眼睛位置(事件玩家) + 方向(眼睛位置(事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 2),
			眼睛位置(事件玩家) + 方向(眼睛位置(事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 2) + 矢量(0, -99, 0), 空, 所有玩家(所有队伍), 假), 眼睛位置(事件玩家) + 方向(眼睛位置(
			事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 2)) < 较大(Y方向分量(所选位置(事件玩家)) + 1 - Y方向分量(当前数组元素), 8));
		事件玩家.Node_Options = 已过滤的数组(事件玩家.Node_Options, 相距距离(射线命中位置(眼睛位置(事件玩家) + 方向(眼睛位置(事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 4),
			眼睛位置(事件玩家) + 方向(眼睛位置(事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 4) + 矢量(0, -99, 0), 空, 所有玩家(所有队伍), 假), 眼睛位置(事件玩家) + 方向(眼睛位置(
			事件玩家), 当前数组元素) * (相距距离(眼睛位置(事件玩家), 当前数组元素) / 4)) < 较大(Y方向分量(所选位置(事件玩家)) + 1 - Y方向分量(当前数组元素), 8));
		If(事件玩家.Using_Stairs);
			If(数组包含(全局.Staircase_Bottom, 事件玩家.Current_Node));
				事件玩家.Stairs_Index = 数组值的索引(全局.Staircase_Bottom, 事件玩家.Current_Node);
			Else If(数组包含(已过滤的数组(全局.Staircase_Middle, 当前数组元素 != 空), 事件玩家.Current_Node));
				事件玩家.Stairs_Index = 数组值的索引(全局.Staircase_Middle, 事件玩家.Current_Node);
			Else If(数组包含(已过滤的数组(全局.Staircase_Top, 当前数组元素 != 空), 事件玩家.Current_Node));
				事件玩家.Stairs_Index = 数组值的索引(全局.Staircase_Top, 事件玩家.Current_Node);
			End;
			If(事件玩家.Last_Stair_Type == 自定义字符串("Bottom"));
				If(全局.Staircase_Middle[事件玩家.Stairs_Index] == 空);
					修改玩家变量(事件玩家, Node_Options, 添加至数组, 全局.Staircase_Top[事件玩家.Stairs_Index]);
				Else;
					修改玩家变量(事件玩家, Node_Options, 添加至数组, 全局.Staircase_Middle[事件玩家.Stairs_Index]);
				End;
			Else If(事件玩家.Last_Stair_Type == 自定义字符串("Middle"));
				修改玩家变量(事件玩家, Node_Options, 添加至数组, 全局.Staircase_Top[事件玩家.Stairs_Index]);
			End;
		End;
		事件玩家.Node_Options = 已过滤的数组(事件玩家.Node_Options, 在视线内(眼睛位置(事件玩家), 当前数组元素, 屏障不会阻挡视线) == 真);
		事件玩家.Node_Options = 已排序的数组(事件玩家.Node_Options, 相距距离(事件玩家, 当前数组元素) * (Y方向分量(所选位置(事件玩家)) + 1 <= Y方向分量(当前数组元素)
			|| !事件玩家.Ignore_Lower_Nodes ? 1 : (相距距离(事件玩家, 事件玩家.Walk_To_Position) < 相距距离(当前数组元素, 事件玩家.Walk_To_Position) ? 5 : 2.500))
			+ 相距距离(事件玩家.Walk_To_Position, 当前数组元素) + 事件玩家.Node_DePrioritze[数组值的索引(事件玩家.Known_Nodes, 当前数组元素)]);
		根据条件跳过(相距距离(矢量(X方向分量(所选位置(事件玩家)), Y方向分量(事件玩家.Walk_To_Position), Z方向分量(所选位置(事件玩家))), 事件玩家.Walk_To_Position) > 15, 1);
		事件玩家.Node_Options = 已排序的数组(事件玩家.Node_Options, 当前数组索引 * (事件玩家.Ignore_Lower_Nodes != 0 && Y方向分量(所选位置(事件玩家)) + (数组包含(
			全局.Staircase_Middle, 当前数组元素) ? 1.500 : 2.750) <= Y方向分量(当前数组元素) && 数组包含(添加至数组(添加至数组(全局.Staircase_Middle, 全局.Staircase_Bottom),
			全局.Staircase_Top), 当前数组元素) ? 1 : 5));
		事件玩家.Current_Node = 首个(事件玩家.Node_Options) < 0 ? 首个(已排序的数组(已过滤的数组(事件玩家.Node_Options, 当前数组索引 < 0), 绝对值(当前数组索引))) : 首个(
			事件玩家.Node_Options);
		If(数量(事件玩家.Node_Options) == 0);
			事件玩家.Node_DePrioritze = 空数组;
			事件玩家.Vist_Count = 空数组;
			事件玩家.Known_Nodes = 空数组;
		End;
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		循环;
	}
}

规则("Walk To Target")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		实体存在(首个(事件玩家.Target_Order)) == 真;
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Walk_To_Position = 所选位置(首个(事件玩家.Target_Order)) + 矢量(0, 1.550, 0);
		事件玩家.Walk_Max = 所在队伍(事件玩家) == 所在队伍(首个(事件玩家.Target_Order)) ? 12 : 25;
		事件玩家.Walk_Min = 所在队伍(事件玩家) == 所在队伍(首个(事件玩家.Target_Order)) ? 4 : 15;
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Walk To Objective")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		实体存在(首个(事件玩家.Target_Order)) != 真;
		(相距距离(事件玩家, 事件玩家.Walk_To_Position) <= 事件玩家.Walk_Min || 对全部为“真”(目标是否完成(0) ? 全局.ObjectiveB_Nodes : 全局.ObjectiveA_Nodes,
			事件玩家.Walk_To_Position != 当前数组元素)) == 真;
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		标准化生命值(事件玩家) >= 0.800;
		(作为进攻队伍(所在队伍(事件玩家)) ? 游戏正在进行中 : 存活(事件玩家)) == 真;
	}

	动作
	{
		事件玩家.Walk_To_Position = 目标是否完成(0) ? 数组随机取值(全局.ObjectiveB_Nodes) : 数组随机取值(全局.ObjectiveA_Nodes);
		事件玩家.Walk_Max = 4;
		事件玩家.Walk_Min = 2;
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Walk To Healthkit")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		存活(事件玩家) == 真;
		标准化生命值(事件玩家) < 0.800;
		事件玩家.Walk_To_Position != 首个(已排序的数组(添加至数组(全局.Healthkits_Small, 全局.Healthkits_Large), 相距距离(事件玩家, 当前数组元素) - (生命值(事件玩家) <= 最大生命值(事件玩家)
			- 200 && 数组包含(全局.Healthkits_Large, 当前数组元素) ? 0 : 10)));
		实体存在(首个(事件玩家.Target_Order)) != 真;
	}

	动作
	{
		事件玩家.Walk_To_Position = 首个(已排序的数组(添加至数组(全局.Healthkits_Small, 全局.Healthkits_Large), 相距距离(事件玩家, 当前数组元素) - (生命值(事件玩家) <= 最大生命值(事件玩家)
			- 200 && 数组包含(全局.Healthkits_Large, 当前数组元素) ? 0 : 10)));
		事件玩家.Walk_Max = 1;
		事件玩家.Walk_Min = 1;
		事件玩家.Node_DePrioritze = 空数组;
		事件玩家.Vist_Count = 空数组;
		事件玩家.Known_Nodes = 空数组;
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

禁用 规则("----------------------------------- Pathfinder ------------------------------------------")
{
	事件
	{
		持续 - 全局;
	}
}

禁用 规则("----------------------------------- Nodes ------------------------------------------")
{
	事件
	{
		持续 - 全局;
	}
}

规则("Nodes Setup")
{
	事件
	{
		子程序;
		Node_Setup;
	}

	动作
	{
		If(当前地图 == 地图(花村) || 当前地图 == 地图(圣诞节花村));
			调用子程序(Hanamura);
			中止;
		End;
		If(当前地图 == 地图(“地平线”月球基地));
			调用子程序(Horizon);
			中止;
		End;
		If(当前地图 == 地图(巴黎));
			调用子程序(Paris);
			中止;
		End;
		If(当前地图 == 地图(阿努比斯神殿));
			调用子程序(Temple_of_Anubus);
			中止;
		End;
		If(当前地图 == 地图(沃斯卡娅工业区));
			调用子程序(Volskaya);
			中止;
		End;
	}
}

规则("Hanamura")
{
	事件
	{
		子程序;
		Hanamura;
	}

	动作
	{
		全局.Path_Nodes = 数组(矢量(23.326, 1.550, -4.398), 矢量(22.802, 1.572, -21.227), 矢量(20.379, 8.008, -21.078), 矢量(12.076, 8.321, -19.733),
			矢量(7.436, 8.550, -22.362), 矢量(-4.010, 8.550, -20.266), 矢量(-10.098, 8.550, -22.046), 矢量(-10.159, 8.630, -27.940), 矢量(-10.448,
			2.550, -22.072), 矢量(-3.706, 2.550, -22.648), 矢量(-4.502, 2.550, -18.663), 矢量(2.903, 1.550, -18.511), 矢量(12.677, 1.550, -24.341),
			矢量(13.540, 1.550, -18.551), 矢量(17.102, 0.594, -4.198), 矢量(13.787, 0.569, -10.678), 矢量(6.207, 0.651, -7.531), 矢量(10.580, 0.550,
			0.575), 矢量(8.623, 1.525, 0.772), 矢量(4.805, 1.550, 0.009), 矢量(2.516, 2.463, 0.083), 矢量(-4.158, 2.550, -8.863), 矢量(-11.794,
			2.550, 0.321), 矢量(-19.305, 0.292, -18.511), 矢量(-18.804, 0.367, -21.806), 矢量(-4.273, 5.550, 18.894), 矢量(-3.979, 5.522, 22.171),
			矢量(-14.486, 5.508, 21.405), 矢量(-14.642, 5.461, 11.854), 矢量(10.242, 5.550, 22.690), 矢量(10.454, 5.550, 17.067), 矢量(12.812, 5.550,
			22.339), 矢量(14.063, 5.615, 17.081), 矢量(14.846, 5.550, 13.098), 矢量(8.320, 5.573, 7.338), 矢量(16.042, 5.576, 7.381), 矢量(20.338,
			5.710, 8.857), 矢量(24.107, 1.550, 3.920), 矢量(8.611, 0.480, 32.047), 矢量(-44.941, 2.550, -113.131), 矢量(-23.513, 2.550, -111.756),
			矢量(-13.984, 2.550, -101.881), 矢量(-33.613, 2.550, -81.852), 矢量(-43.687, 2.550, -92.405), 矢量(-28.019, 2.550, -87.786), 矢量(
			-22.425, 2.550, -89.371), 矢量(-15.520, 2.550, -96.790), 矢量(0.972, 8.560, -90.118), 矢量(7.405, 8.550, -83.355), 矢量(7.679, 8.560,
			-88.683), 矢量(30.693, 4.550, -73.233), 矢量(30.324, 4.550, -79.620), 矢量(36.638, 4.550, -74.064), 矢量(39.791, 4.550, -79.534), 矢量(
			36.336, 4.550, -84.995), 矢量(13.544, 5.550, -78.057), 矢量(7.500, 5.550, -76.473), 矢量(15.270, 5.550, -73.499), 矢量(2.112, 6.560,
			-71.530), 矢量(-2.505, 5.550, -66.774), 矢量(0.288, 5.550, -58.229), 矢量(-3.119, 5.550, -60.522), 矢量(-4.678, 4.708, -58.827), 矢量(
			-10.212, 4.550, -53.249), 矢量(-20.232, 2.550, -63.176), 矢量(-17.562, 2.550, -65.719), 矢量(-7.489, -3.550, -64.417), 矢量(-13.447,
			-3.550, -69.901), 矢量(-3.520, -3.550, -71.075), 矢量(2.337, -3.550, -77.819), 矢量(11.152, -3.550, -85.529), 矢量(14.924, -3.450,
			-86.900), 矢量(16.193, -3.450, -90.854), 矢量(9.584, 0.550, -73.161), 矢量(5.617, 0.550, -68.609), 矢量(0.845, 0.550, -66.721), 矢量(
			1.980, 0.919, -72.070), 矢量(-0.694, 1.412, -74.516), 矢量(-2.950, 0.722, -77.181), 矢量(-5.583, 0.556, -75.642), 矢量(-1.978, 0.625,
			-80.740), 矢量(-9.561, 0.625, -74.101), 矢量(-0.194, 0.625, -83.874), 矢量(2.613, 0.625, -93.657), 矢量(-2.068, 0.625, -90.092), 矢量(
			-10.959, 0.625, -84.734), 矢量(8.078, 0.025, -65.919), 矢量(22.556, -0.366, -64.746), 矢量(25.035, -0.326, -70.248), 矢量(35.254,
			-0.334, -61.302), 矢量(37.784, -0.422, -61.434), 矢量(37.025, -0.293, -38.859), 矢量(25.313, -0.101, -39.620), 矢量(30.891, 3.905,
			-63.560), 矢量(30.003, 4.426, -68.520), 矢量(30.840, 3.297, -53.564), 矢量(30.830, 3.390, -42.570), 矢量(30.717, 3.550, -32.612), 矢量(
			38.142, 3.550, -34.735), 矢量(18.872, 1.550, -27.956), 矢量(12.711, 1.550, -26.516), 矢量(12.558, -0.201, -39.817), 矢量(21.491,
			-0.121, -48.008), 矢量(12.915, 0.326, -49.034), 矢量(6.676, 0.080, -49.253), 矢量(1.875, -0.325, -45.146), 矢量(12.865, -0.178,
			-61.159), 矢量(-8.050, 2.550, -32.381), 矢量(-4.343, 2.550, -29.667), 矢量(5.460, 1.981, -29.559), 矢量(11.122, 1.550, -29.824), 矢量(
			-10.145, 2.610, -27.910), 矢量(101.717, 3.550, 7.038), 矢量(103.830, 2.647, 7.075), 矢量(108.438, 2.550, 3), 矢量(106.256, 2.550,
			-0.829), 矢量(82.457, -1.450, -0.031), 矢量(78.571, -0.739, 0.167), 矢量(72.788, -0.420, -0.517), 矢量(82.051, -1.450, 9.591), 矢量(
			81.864, -1.450, 18.213), 矢量(76.415, -0.451, 23.038), 矢量(94.332, 3.550, 7.176), 矢量(90.657, 3.550, 0.558), 矢量(87.567, 3.550,
			6.918), 矢量(73.874, -0.452, 25.297), 矢量(66.355, -0.455, 26.897), 矢量(63.156, -0.511, 19.953), 矢量(62.007, -0.214, 1.812), 矢量(
			68.239, -0.345, 5.141), 矢量(60.646, -0.447, 12.381), 矢量(65.826, -0.321, -6.317), 矢量(44.272, 1.419, -11.591), 矢量(43.744, 2.322,
			-8.778), 矢量(44.928, 2.549, -5.859), 矢量(48.171, 1.603, -5.974), 矢量(49.877, 0.738, -5.933), 矢量(54.116, 0.550, -5.108), 矢量(53.974,
			0.550, 3.989), 矢量(53.768, 0.026, 9.502), 矢量(49.439, 0.467, 13.473), 矢量(49.236, 0.608, 6.765), 矢量(43.397, 1.424, 10.119), 矢量(
			41.121, 2.550, 1.999), 矢量(36.364, 1.747, 1.946), 矢量(36.712, 1.716, 9.701), 矢量(40.608, 1.795, 18.869), 矢量(40.690, 1.865,
			32.050), 矢量(47.836, 7.550, 17.403), 矢量(48.101, 7.550, 1.772), 矢量(42.910, 7.550, 1.794), 矢量(40.179, 7.550, -2.464), 矢量(40.230,
			7.550, -6.177), 矢量(42.999, 7.550, -3.567), 矢量(57.528, 7.550, -12.180), 矢量(57.784, 7.550, -14.903), 矢量(61.827, 7.550, -12.727),
			矢量(61.801, 7.550, -6.126), 矢量(45.933, 7.550, -10.997), 矢量(45.846, 7.550, 8.578), 矢量(41.647, 7.550, 15.876), 矢量(58.109, 3.550,
			-25.378), 矢量(38.746, 1.572, -23.554), 矢量(38.976, 1.501, -14.289), 矢量(38.984, 1.499, -11.432), 矢量(33.204, 1.649, -12.868), 矢量(
			31.508, 1.640, -2.649), 矢量(35.075, 1.755, 5.929), 矢量(1.910, 0.550, 17.312), 矢量(14.321, 0.550, 18.889), 矢量(-13.861, 0.550,
			18.621), 矢量(6.323, 1.551, 8.883), 矢量(13.904, 1.551, 8.651), 矢量(13.843, 0.896, 12.593), 矢量(-34.591, 2.550, -101.898), 矢量(20.761,
			5.550, -82.739), 矢量(24.715, 5.073, -80.266), 矢量(37.793, -0.303, -50.779), 矢量(-2.594, 2.550, -36.363), 矢量(5.115, 5.532, 28.542),
			矢量(3.215, 6.188, -66.369), 矢量(8.019, 5.868, -71.019), 矢量(-27.203, 2.550, -61.468));
		全局.Healthkits = 数组(矢量(40.843, 1.857, 34.410), 矢量(45.064, 2.556, -0.793), 矢量(51.987, 3.550, -27.967), 矢量(35.901, 1.904, 17.370), 矢量(
			25.713, 1.570, -23.574), 矢量(7.328, 5.550, 16.563), 矢量(7.997, 0.387, 35.636), 矢量(-14.681, 5.424, 12.924), 矢量(1.953, 2.550,
			-22.043), 矢量(0.587, 2.550, -36.584), 矢量(12.802, 0.326, -48.955), 矢量(38.584, -0.327, -38.603), 矢量(29.960, -0.329, -65.198), 矢量(
			14.711, -3.450, -96.160), 矢量(-0.467, -3.550, -74.113), 矢量(-1.002, 0.550, -97.590), 矢量(-13.066, 2.550, -61.262), 矢量(29.870,
			4.550, -89.663));
		全局.ObjectiveA_Nodes = 数组(矢量(1.229, 2.551, 8.770), 矢量(1.173, 2.551, 5.163), 矢量(1.210, 2.551, 1.202), 矢量(1.210, 2.551, -2.319), 矢量(
			1.210, 2.551, -6.102), 矢量(-1.536, 2.551, -6.153), 矢量(-1.561, 2.551, -2.367), 矢量(-1.425, 2.551, 1.315), 矢量(-1.452, 2.551,
			5.101), 矢量(-3.732, 2.550, 5.157), 矢量(-4.056, 2.550, -2.341), 矢量(-4.014, 2.550, -6.299), 矢量(-6.608, 2.550, -6.298), 矢量(-6.563,
			2.550, -2.249), 矢量(-6.448, 2.550, 0.134), 矢量(-6.631, 2.550, 5.149), 矢量(-9.541, 2.550, -6.500), 矢量(-9.618, 2.550, -2.539), 矢量(
			-9.676, 2.550, 0.098), 矢量(-9.848, 2.550, 5.172), 矢量(-9.981, 2.550, 9.133), 矢量(-9.861, 2.550, 2.538), 矢量(-4.328, 2.550, 2.651),
			矢量(0.072, 2.550, 2.702));
		全局.ObjectiveB_Nodes = 数组(矢量(-21.182, 0.625, -86.458), 矢量(-19.057, 0.625, -88.496), 矢量(-17.015, 0.800, -90.692), 矢量(-15.043, 0.675,
			-92.204), 矢量(-12.440, 0.625, -94.445), 矢量(-10.310, 0.625, -92.211), 矢量(-12.696, 0.625, -89.867), 矢量(-14.521, 0.625, -88.070),
			矢量(-16.669, 0.625, -85.947), 矢量(-18.729, 0.625, -83.919), 矢量(-16.137, 0.625, -81.284), 矢量(-14.068, 0.625, -83.370), 矢量(-11.895,
			0.625, -85.464), 矢量(-10.028, 0.625, -87.302), 矢量(-7.724, 0.625, -89.687), 矢量(-5.492, 0.625, -87.415), 矢量(-7.864, 0.625,
			-85.083), 矢量(-9.666, 0.625, -83.313), 矢量(-11.855, 0.625, -81.160), 矢量(-14.026, 0.625, -79.022), 矢量(-11.996, 0.625, -76.922),
			矢量(-9.783, 0.625, -79.062), 矢量(-7.607, 0.625, -81.206), 矢量(-5.799, 0.625, -82.956), 矢量(-3.323, 0.625, -85.344));
		全局.Chokepoint = 数组(矢量(1.354, 1.320, -72.613), 矢量(12.896, 1.550, -23.731), 矢量(29.407, 1.810, -3.931));
		全局.Staircase_Top = 数组(矢量(1.485, 8.560, -94.928), 矢量(12.239, 8.550, -92.720), 矢量(12.940, 1.550, -30.217), 矢量(-8.359, 2.550,
			-37.229), 矢量(4.626, 8.550, -25.707), 矢量(26.404, 7.550, -17.067), 矢量(22.222, 3.548, 15.676), 矢量(17.911, 5.549, 13.438), 矢量(
			21.795, 3.550, 22.088), 矢量(-3.320, 5.550, 26.877), 矢量(-4.120, 5.550, 13.560), 矢量(-14.209, 2.550, 4.129), 矢量(-9.527, 2.550,
			-17.871), 矢量(-12.611, 2.550, -30.736), 矢量(27.872, 3.550, -29.514), 矢量(-12.602, 4.550, -55.338), 矢量(-27.662, 2.550, -53.900),
			矢量(-25.911, 2.550, -69.793), 矢量(-23.188, 2.550, -83.562), 矢量(-9.565, 2.550, -97.634), 矢量(16.857, 0.550, -78.027), 矢量(26.588,
			3.465, -59.778), 矢量(36.688, 7.550, 19.395), 矢量(48.092, 7.550, -14.500), 矢量(46.424, 3.550, -26.669), 矢量(58.032, 3.550, -22.211),
			矢量(76.081, 3.550, 6.813), 矢量(103.054, 2.550, -0.079), 矢量(-14.163, 2.551, -2.498), 矢量(4.345, 0.550, -93.658));
		全局.Staircase_Bottom = 数组(矢量(-8.654, 2.550, -105.336), 矢量(18.346, 5.550, -85.931), 矢量(13.125, -0.392, -35.474), 矢量(-4.662, -0.450,
			-44.151), 矢量(-9.166, 2.550, -25.514), 矢量(26.384, 1.569, -21.243), 矢量(22.346, 1.550, 9.923), 矢量(18.199, 3.548, 19.492), 矢量(
			15.095, 0.567, 27.782), 矢量(-4.576, 0.553, 31.248), 矢量(-3.964, 2.550, 6.639), 矢量(-13.750, 0.550, 10.165), 矢量(-15.202, 0.371,
			-17.774), 矢量(-17.348, 0.308, -30.299), 矢量(21.814, 1.550, -29.540), 矢量(-16.068, 2.550, -59.050), 矢量(-11.031, -3.450, -60.910),
			矢量(-21.294, 0.625, -74.187), 矢量(-19.641, 0.625, -79.817), 矢量(-5.488, 0.625, -93.446), 矢量(17.094, -3.450, -88.167), 矢量(25.485,
			-0.198, -48.878), 矢量(37.229, 2.055, 32), 矢量(48.122, 3.550, -23.712), 矢量(41.607, 1.587, -26.914), 矢量(57.735, 0.463, -13.378),
			矢量(76.038, -0.367, 17.636), 矢量(92.502, -1.450, 0.128), 矢量(-14.578, 0.509, -7.653), 矢量(6.118, -3.550, -82.564));
		全局.Healthkits_Small = 数组(矢量(40.843, 1.857, 34.410), 矢量(51.987, 3.550, -27.967), 矢量(25.713, 1.570, -23.574), 矢量(-14.681, 5.424,
			12.924), 矢量(1.953, 2.550, -22.043), 矢量(0.587, 2.550, -36.584), 矢量(38.584, -0.327, -38.603), 矢量(29.960, -0.329, -65.198), 矢量(
			-0.467, -3.550, -74.113), 矢量(-1.002, 0.550, -97.590));
		全局.Healthkits_Large = 数组(矢量(45.064, 2.556, -0.793), 矢量(35.901, 1.904, 17.370), 矢量(7.328, 5.550, 16.563), 矢量(7.997, 0.387, 35.636),
			矢量(12.802, 0.326, -48.955), 矢量(14.711, -3.450, -96.160), 矢量(-13.066, 2.550, -61.262), 矢量(29.870, 4.550, -89.663));
		全局.Staircase_Middle = 数组(0, 0, 0, 矢量(-8.679, 0.550, -44.166), 0, 矢量(35.414, 4.550, -19.065), 0, 0, 矢量(21.509, 2.550, 26.687), 矢量(
			-12.062, 2.551, 29.122), 0, 0, 0, 0, 0, 0, 矢量(-22.568, 0.550, -49.306), 0, 0, 0, 矢量(21.901, -1.450, -82.408), 0, 矢量(31.652,
			4.550, 30.354), 0, 0, 0, 0, 0, 0, 矢量(3.003, -1.381, -86.675));
	}
}

规则("Horizon")
{
	事件
	{
		子程序;
		Horizon;
	}

	动作
	{
		全局.Path_Nodes = 数组(矢量(-27.416, 9.550, 11.435), 矢量(-0.100, 9.550, 4.617), 矢量(-7.170, 9.550, -9.529), 矢量(-14.581, 9.550, -15.637),
			矢量(-15.857, 9.550, -26.488), 矢量(4.976, 14.573, -23.815), 矢量(7.042, 14.573, -30.751), 矢量(10.340, 10.550, -1.775), 矢量(1.970,
			9.709, 0.845), 矢量(5.918, 10.550, -0.720), 矢量(4.788, 10.573, -12.787), 矢量(-1.953, 10.199, -8.784), 矢量(11.757, 10.550, -8.720),
			矢量(19.299, 10.550, 3.716), 矢量(31.798, 10.550, -3.219), 矢量(29.472, 10.550, -7.158), 矢量(20.318, 10.550, -2.638), 矢量(16.082,
			10.550, -11.573), 矢量(16.735, 10.550, -0.454), 矢量(23.669, 10.550, 1.283), 矢量(21.746, 14.560, 2.395), 矢量(19.388, 14.550,
			-34.935), 矢量(25.620, 14.550, -44.089), 矢量(15.941, 14.550, -44.511), 矢量(8.381, 10.550, -32.560), 矢量(4.203, 10.550, -25.457), 矢量(
			16.609, 10.550, -27.218), 矢量(12.130, 10.550, -18.763), 矢量(40.929, 14.550, -47.438), 矢量(44.645, 14.550, -44.961), 矢量(42.932,
			13.872, -41.957), 矢量(44.334, 13.550, -37.203), 矢量(46.449, 13.630, -34.344), 矢量(51.945, 13.550, -34.786), 矢量(49.181, 13.573,
			-29.746), 矢量(39.411, 13.550, -36.377), 矢量(33.098, 13.550, -26.020), 矢量(25.763, 13.893, -30.813), 矢量(27.314, 8.550, -24.657),
			矢量(29.352, 8.550, -29.056), 矢量(39.543, 8.550, -22.023), 矢量(28, 8.550, -36.684), 矢量(28.155, 8.550, -43.395), 矢量(27.992, 8.550,
			-13.659), 矢量(21.213, 9.468, -13.812), 矢量(18.729, 10.404, -12.364), 矢量(39.067, 8.550, -13.452), 矢量(47.677, 8.550, -16.572), 矢量(
			51.232, 8.550, -14.584), 矢量(54.486, 8.550, -12.242), 矢量(56.807, 8.550, -23.028), 矢量(60.130, 8.550, -21.062), 矢量(55.119, 7.688,
			-27.992), 矢量(58.291, 7.550, -33.512), 矢量(48.866, 7.550, -39.633), 矢量(37.271, 8.573, -52.009), 矢量(34.885, 8.550, -45.072), 矢量(
			40.399, 7.955, -43.176), 矢量(50.457, 7.894, -44.832), 矢量(47.379, 8.573, -52.526), 矢量(57.547, 8.550, -46.274), 矢量(64.108, 8.548,
			-42.002), 矢量(66.429, 8.548, -45.288), 矢量(58.461, 8.550, -55.792), 矢量(49.036, 8.987, -58.546), 矢量(41.714, 9.560, -64.718), 矢量(
			38.537, 9.578, -68.146), 矢量(39.829, 15.551, -57.861), 矢量(43.419, 15.550, -62.208), 矢量(48.339, 15.550, -59.055), 矢量(43.050,
			15.550, -77.565), 矢量(52.750, 15.550, -76.880), 矢量(56.158, 15.550, -74.222), 矢量(50.665, 15.550, -74.356), 矢量(53.158, 15.577,
			-79.095), 矢量(66.561, 15.549, -76.361), 矢量(71.375, 15.550, -68.345), 矢量(64.344, 15.551, -61.241), 矢量(64.619, 15.551, -67.729),
			矢量(71.203, 8.551, -46.265), 矢量(76.291, 8.550, -43.657), 矢量(81.479, 7.997, -40.294), 矢量(92.125, 14.079, -67.425), 矢量(88.367,
			14.725, -71.735), 矢量(83.015, 15.550, -72.555), 矢量(67.774, 8.550, -50.607), 矢量(65.247, 7.991, -62.930), 矢量(59.419, 7.543,
			-71.189), 矢量(66.571, 9.550, -85.520), 矢量(61.315, 10.418, -86.532), 矢量(74.573, 8.550, -71.861), 矢量(79.695, 8.550, -62), 矢量(
			80.566, 8.522, -74.102), 矢量(54.563, 7.931, -63.512), 矢量(40.343, 9.550, -86.533), 矢量(42.325, 9.550, -90.665), 矢量(46.524, 10.392,
			-90.353), 矢量(41.727, 9.550, -101.793), 矢量(50.729, 9.550, -100.972), 矢量(58.682, 9.550, -99.946), 矢量(58.491, 10.378, -97.490),
			矢量(50.678, 10.451, -97.681), 矢量(53.567, 11.024, -79.766), 矢量(60.487, 10.550, -92.918), 矢量(70.557, 10.842, -92.804), 矢量(66.998,
			10.550, -96.786), 矢量(61.783, 10.550, -92.753), 矢量(32.789, 9.550, -85.840), 矢量(30.771, 9.550, -100.633), 矢量(27.046, 9.550,
			-94.068), 矢量(15.953, 8.477, -86.120), 矢量(4.705, 8.171, -82.659), 矢量(2.260, 7.550, -90.033), 矢量(-8.207, 7.550, -88.812), 矢量(
			-12.908, 7.550, -96.011), 矢量(-5.666, 7.550, -99.081), 矢量(11.191, 7.449, -96.003), 矢量(18.638, 7.550, -104.389), 矢量(-4.062,
			11.550, -121.655), 矢量(-6.253, 10.781, -125.786), 矢量(-18.784, 6.090, -138.869), 矢量(-17.468, 6.050, -143.060), 矢量(-18.129, 6.217,
			-148.333), 矢量(-22.509, 6.050, -145.156), 矢量(-22.738, 6.050, -140.563), 矢量(-22.203, 6.050, -133.995), 矢量(-30.459, 6.050,
			-132.309), 矢量(-33.854, 6.050, -138.049), 矢量(-26.159, 6.550, -154.141), 矢量(-33.410, 6.550, -150.422), 矢量(-35.814, 6.550,
			-156.349), 矢量(-47.511, 6.623, -150.970), 矢量(-43.046, 6.550, -140.485), 矢量(-49.173, 6.550, -136.375), 矢量(-47.589, 6.028,
			-131.453), 矢量(-41.769, 6.050, -134.062), 矢量(-39.472, 6.050, -127.583), 矢量(-39.719, 11.550, -127.133), 矢量(-35.175, 11.550,
			-118.507), 矢量(-35.886, 6.090, -126.625), 矢量(-37.383, 6.050, -120.451), 矢量(-42.696, 6.050, -117.668), 矢量(-36.096, 5.958,
			-117.130), 矢量(-35.285, 4.986, -115.354), 矢量(-30.479, 4.550, -114.447), 矢量(-34.684, 4.550, -124.077), 矢量(-21.229, 4.550,
			-131.051), 矢量(-18.354, 5.390, -137.560), 矢量(-17.057, 4.548, -134.694), 矢量(-14.100, 4.092, -131.918), 矢量(-8.383, 3.546,
			-133.595), 矢量(-14.727, 4.300, -121.911), 矢量(-4.357, 4.550, -118.581), 矢量(-4.474, 3.567, -128.716), 矢量(-11.381, 4.550,
			-118.748), 矢量(-19.624, 4.513, -115.519), 矢量(-24.245, 4.485, -113.598), 矢量(-17.970, 4.550, -111.511), 矢量(-25.728, 6.050,
			-98.755), 矢量(-28.302, 5.158, -103.466), 矢量(-30.057, 4.550, -107.326), 矢量(-32.134, 6.130, -96.315), 矢量(-36.878, 6.050, -99.875),
			矢量(-39.950, 6.050, -108.674), 矢量(-48.896, 6.233, -167.993), 矢量(12.214, 14.550, -9.129), 矢量(78.524, 15.550, -72.096), 矢量(26.088,
			9.550, -84.856), 矢量(33.437, 15.537, -97.321), 矢量(32.887, 15.537, -89.298), 矢量(-21.546, 10.551, -142.513));
		全局.Healthkits = 数组(矢量(-5.660, 3.518, -132.685), 矢量(-34.994, 6.550, -142.106), 矢量(-36.689, 6.050, -108.801), 矢量(-20.733, 6.050,
			-103.183), 矢量(15.776, 7.550, -110.317), 矢量(15.296, 8.550, -78.830), 矢量(33.999, 9.550, -103.051), 矢量(37.044, 9.550, -74.276),
			矢量(73.574, 8.550, -60.844), 矢量(87.286, 13.710, -59.145), 矢量(17.783, 10.550, -48.335), 矢量(35.868, 8.550, -34.060), 矢量(61.598,
			8.550, -22.974));
		全局.ObjectiveA_Nodes = 数组(矢量(49.346, 10.551, -95.103), 矢量(51.597, 10.545, -94.944), 矢量(54.162, 10.541, -94.772), 矢量(56.654, 10.530,
			-94.624), 矢量(58.985, 10.547, -94.713), 矢量(58.870, 10.549, -91.409), 矢量(56.502, 10.462, -91.449), 矢量(54.065, 10.425, -91.531),
			矢量(51.399, 10.472, -91.711), 矢量(49.225, 10.550, -92.002), 矢量(49.080, 10.550, -88.804), 矢量(51.297, 10.472, -88.729), 矢量(54.036,
			10.409, -88.665), 矢量(56.366, 10.462, -88.604), 矢量(58.802, 10.530, -88.627), 矢量(58.707, 10.550, -85.449), 矢量(56.242, 10.452,
			-85.535), 矢量(53.868, 10.408, -85.616), 矢量(51.220, 10.456, -85.706), 矢量(48.942, 10.550, -85.784), 矢量(48.884, 10.550, -83.244),
			矢量(51.127, 10.517, -83.169), 矢量(53.738, 10.461, -83.086), 矢量(56.216, 10.506, -83.002), 矢量(58.610, 10.549, -83.195), 矢量(56.073,
			10.550, -80.563), 矢量(53.647, 10.550, -80.643), 矢量(50.952, 10.550, -80.784));
		全局.ObjectiveB_Nodes = 数组(矢量(-32.927, 4.300, -122.951), 矢量(-30.697, 4.438, -124.027), 矢量(-28.576, 4.328, -125.117), 矢量(-26.432,
			4.303, -126.215), 矢量(-24.454, 4.301, -127.228), 矢量(-22.474, 4.301, -128.189), 矢量(-20.560, 4.261, -129.143), 矢量(-19.199, 4.175,
			-126.675), 矢量(-21.026, 4.270, -125.589), 矢量(-23.104, 4.298, -124.645), 矢量(-25.030, 4.389, -123.643), 矢量(-27.272, 4.324,
			-122.538), 矢量(-29.216, 4.314, -121.280), 矢量(-31.259, 4.299, -119.980), 矢量(-29.696, 4.289, -117.128), 矢量(-27.618, 4.153,
			-118.258), 矢量(-25.454, 4.172, -119.350), 矢量(-23.442, 4.289, -120.596), 矢量(-21.356, 4.279, -121.855), 矢量(-19.573, 4.219,
			-122.778), 矢量(-17.654, 4.189, -123.826), 矢量(-16.043, 4.300, -120.845), 矢量(-17.808, 4.300, -119.600), 矢量(-19.548, 4.300,
			-118.652), 矢量(-21.602, 4.302, -117.506), 矢量(-23.773, 4.302, -116.324), 矢量(-25.970, 4.294, -115.239), 矢量(-28.108, 4.300,
			-114.078));
		全局.Chokepoint = 数组(矢量(52.737, 8.550, -50.109), 矢量(15.496, 7.550, -95.478), 矢量(-14.188, 4.570, -107.894));
		全局.Staircase_Top = 数组(矢量(17.670, 14.550, 3.458), 矢量(1.876, 14.550, -19.829), 矢量(18.404, 10.550, -46.099), 矢量(11.054, 14.550,
			-40.380), 矢量(37.976, 13.550, -32.391), 矢量(32.320, 12.034, -20.587), 矢量(33.552, 13.550, -22.011), 矢量(33.105, 15.550, -54.836),
			矢量(42.592, 9.560, -77.622), 矢量(66.252, 9.550, -80.093), 矢量(78.286, 15.550, -75.626), 矢量(92.303, 13.427, -59.540), 矢量(68.506,
			8.550, -68.383), 矢量(72.773, 9.550, -82.055), 矢量(41.558, 15.550, -80.731), 矢量(2.387, 7.550, -101.752), 矢量(-9.376, 7.550,
			-98.669), 矢量(-11.541, 7.515, -98.870), 矢量(-15.724, 7.550, -93.901), 矢量(25.117, 9.550, -89.127), 矢量(22.394, 9.550, -98.417), 矢量(
			66.031, 10.550, -100.729), 矢量(-46.304, 11.573, -125.169), 矢量(-13.585, 10.550, -140.475), 矢量(5.767, 10.550, -112.094), 矢量(
			-5.975, 11.550, -118.321), 矢量(20.670, 10.550, -33.250));
		全局.Staircase_Bottom = 数组(矢量(8.304, 10.550, 0.946), 矢量(-11.381, 9.549, -28.002), 矢量(22.969, 8.548, -42.901), 矢量(13.462, 10.560,
			-43.255), 矢量(42.709, 8.610, -22.318), 矢量(28.604, 8.550, -18.659), 矢量(32.323, 12.110, -20.487), 矢量(33.032, 9.550, -67.406), 矢量(
			48.916, 7.549, -77.425), 矢量(66.088, 7.545, -74.162), 矢量(72.079, 9.550, -86.233), 矢量(86.402, 8.115, -43.997), 矢量(65.825, 7.555,
			-68.458), 矢量(72.798, 8.550, -77.813), 矢量(27.988, 9.550, -81.580), 矢量(-2.541, 4.550, -110.778), 矢量(-14.988, 4.570, -108.138),
			矢量(-14.988, 4.570, -108.138), 矢量(-18.942, 6.112, -96.049), 矢量(19.425, 7.639, -89.584), 矢量(16.930, 7.553, -99.053), 矢量(62.142,
			9.549, -101.051), 矢量(-46.835, 6.050, -128.644), 矢量(-15.348, 6.217, -144.213), 矢量(11.964, 7.550, -108.366), 矢量(-4.161, 10.550,
			-114.576), 矢量(23.435, 8.550, -37.471));
		全局.Healthkits_Small = 数组(矢量(-5.660, 3.518, -132.685), 矢量(-34.994, 6.550, -142.106), 矢量(-20.733, 6.050, -103.183), 矢量(15.776, 7.550,
			-110.317), 矢量(33.999, 9.550, -103.051), 矢量(37.044, 9.550, -74.276), 矢量(17.783, 10.550, -48.335));
		全局.Healthkits_Large = 数组(矢量(-36.689, 6.050, -108.801), 矢量(15.296, 8.550, -78.830), 矢量(73.574, 8.550, -60.844), 矢量(87.286, 13.710,
			-59.145), 矢量(35.868, 8.550, -34.060), 矢量(61.598, 8.550, -22.974));
		全局.Staircase_Middle = 数组(矢量(11.475, 12.550, 6.764), 矢量(-4.713, 12.550, -31.389), 0, 矢量(6.399, 12.550, -45.494), 矢量(44.933, 10.550,
			-27.857), 矢量(30.907, 10.070, -21.456), 0, 矢量(27.490, 13.550, -58.165), 0, 0, 矢量(78.570, 11.550, -85.181), 矢量(90.856, 11.210,
			-51.428), 0, 0, 0, 矢量(0.249, 6.550, -105.835), 0, 0, 0, 0, 0, 0, 矢量(-55.333, 8.550, -124.210), 矢量(-6.260, 8.550, -146.774), 0,
			0, 0);
	}
}

规则("Paris")
{
	事件
	{
		子程序;
		Paris;
	}

	动作
	{
		全局.Path_Nodes = 数组(矢量(24.308, 13.550, -86.868), 矢量(23.233, 12.592, -85.093), 矢量(22.769, 12.548, -79.475), 矢量(29.892, 12.548,
			-76.696), 矢量(34.438, 13.550, -81.461), 矢量(33.281, 12.658, -79.778), 矢量(30.198, 13.550, -85.401), 矢量(16.810, 11.581, -61.484),
			矢量(21.483, 11.873, -62.732), 矢量(15.809, 11.809, -65.854), 矢量(17.494, 12.550, -73.753), 矢量(11.644, 12.550, -80.370), 矢量(5.531,
			11.574, -70.299), 矢量(14.642, 11.474, -56.956), 矢量(7.186, 11.572, -58.621), 矢量(0.136, 11.545, -50.437), 矢量(-9.380, 15.550,
			-40.527), 矢量(-15.859, 15.550, -34.054), 矢量(-16.424, 15.550, -47.422), 矢量(-4.767, 11.474, -54.710), 矢量(-2.243, 11.473, -57.638),
			矢量(-8.907, 11.550, -65.156), 矢量(-4.641, 11.633, -68.622), 矢量(8.162, 12.409, -74.641), 矢量(-4.768, 11.633, -60.858), 矢量(-12.900,
			11.550, -60.118), 矢量(-18.799, 11.633, -59.620), 矢量(-15.347, 17.550, -56.451), 矢量(-13.034, 11.474, -51.996), 矢量(-19.818, 11.475,
			-48.423), 矢量(-25.964, 11.475, -39.395), 矢量(-24.867, 11.474, -34.675), 矢量(-31.389, 11.593, -30.297), 矢量(-26.480, 11.474,
			-25.889), 矢量(-0.394, 12.938, -27.169), 矢量(-23.582, 11.633, -22.876), 矢量(-17.373, 11.550, -17.042), 矢量(-19.134, 11.633,
			-14.117), 矢量(-52.490, 13.603, -19.204), 矢量(-39.745, 15.540, -17.723), 矢量(-37.194, 15.542, -15.172), 矢量(-33.074, 15.540,
			-10.875), 矢量(-33.070, 15.541, -6.737), 矢量(-34.966, 15.541, -5.970), 矢量(-42.078, 11.474, 3.258), 矢量(-39.901, 15.542, -13.152),
			矢量(-47.741, 15.542, -12.277), 矢量(-52.292, 16.540, -8.120), 矢量(-56.816, 16.101, -3.688), 矢量(-67.860, 15.540, 1.828), 矢量(-46.318,
			11.574, 5.506), 矢量(-47.927, 12.568, 7.071), 矢量(-49.518, 13.486, 8.559), 矢量(-42.393, 13.540, 16.341), 矢量(-39.757, 12.676,
			13.648), 矢量(-40.989, 12.471, 13.282), 矢量(-39.034, 11.574, 8.542), 矢量(-37.390, 11.474, 3.600), 矢量(-29.443, 11.474, -2.861), 矢量(
			-29.312, 11.474, -12.457), 矢量(-21, 11.572, -9.315), 矢量(-38.891, 17.489, 17.682), 矢量(-42.334, 17.540, 25.215), 矢量(-47.311,
			17.620, 25.466), 矢量(-47.192, 17.546, 20.869), 矢量(-50.281, 17.546, 23.958), 矢量(-34.258, 13.541, 32.160), 矢量(-47.296, 13.620,
			25.579), 矢量(-41.280, 13.542, 28.620), 矢量(-24.897, 11.540, 34.357), 矢量(-29.128, 11.540, 19.524), 矢量(-29.882, 11.574, 18.698),
			矢量(-22.312, 11.603, 20.280), 矢量(-28.698, 11.603, 26.504), 矢量(-17.599, 11.540, 25.202), 矢量(-21.853, 11.540, 31.282), 矢量(-50.795,
			13.540, 20.952), 矢量(-68.318, 13.526, -17.811), 矢量(-58.050, 13.505, -21.887), 矢量(-77.914, 11.405, -35.128), 矢量(-65.271, 11.554,
			-42.475), 矢量(-75.853, 13.539, -15.291), 矢量(-81.719, 11.559, -26.639), 矢量(-88.970, 11.434, -28.746), 矢量(-95.691, 12.324,
			-38.385), 矢量(-88.967, 12.464, -45.159), 矢量(-83.948, 11.530, -45.098), 矢量(-72.240, 11.554, -51.136), 矢量(-68.157, 12.405,
			-55.257), 矢量(-78.327, 11.405, -49.955), 矢量(-80.091, 12.222, -53.616), 矢量(-80.903, 13.125, -55.273), 矢量(-86.185, 13.550,
			-64.647), 矢量(-100.342, 13.550, -57.923), 矢量(-98.006, 13.550, -53.313), 矢量(-108.955, 13.550, -47.788), 矢量(-105.662, 12.886,
			-42.170), 矢量(-103.850, 12.321, -36.444), 矢量(-110.349, 11.550, -62.061), 矢量(-116.872, 11.550, -61.056), 矢量(-121.681, 11.340,
			-54.212), 矢量(-117.191, 11.400, -45.109), 矢量(-113.979, 12.325, -43.588), 矢量(-118.589, 12.389, -41.081), 矢量(-113.513, 12.565,
			-32.895), 矢量(-108.806, 12.328, -34.822), 矢量(-108.825, 11.550, -68.974), 矢量(-115.904, 11.550, -70.885), 矢量(-109.761, 12.544,
			-76.062), 矢量(-108.021, 13.512, -76.902), 矢量(-105.438, 13.550, -78.296), 矢量(-106.996, 12.471, -70.135), 矢量(-105.413, 13.393,
			-71.076), 矢量(-102.627, 13.550, -72.528), 矢量(-120.155, 14.550, -86.092), 矢量(-110.381, 14.550, -82.038), 矢量(-112.749, 14.550,
			-87.297), 矢量(-110.830, 13.700, -88.072), 矢量(-108.383, 13.708, -83.146), 矢量(-105.904, 13.550, -87.414), 矢量(-118.469, 14.550,
			-96.360), 矢量(-117.289, 14.550, -91.677), 矢量(-100.168, 16.550, -92.241), 矢量(-104.779, 16.550, -89.910), 矢量(-95.170, 16.550,
			-94.644), 矢量(-91.974, 14.550, -109.413), 矢量(-87.093, 14.550, -104.819), 矢量(-76.290, 16.550, -92.112), 矢量(-76.407, 16.550,
			-84.858), 矢量(-69.189, 16.550, -88.979), 矢量(-63.515, 14.550, -79.509), 矢量(-56.494, 12.447, -66.895), 矢量(-62.180, 12.550,
			-67.923), 矢量(-64.152, 12.541, -64.238), 矢量(-71.022, 14.550, -71.084), 矢量(-77.475, 13.824, -68.435), 矢量(-88.212, 14.550,
			-98.996), 矢量(-89.966, 13.683, -98.174), 矢量(-84.246, 14.550, -97.373), 矢量(-87.185, 13.779, -92.916), 矢量(-92.984, 13.550,
			-94.422), 矢量(-87.633, 13.550, -67.280), 矢量(-63.761, 12.402, -58.793), 矢量(-48.319, 10.247, -56.678), 矢量(-51.024, 10.689,
			-49.133), 矢量(-56.052, 10.569, -51.056), 矢量(-58.155, 11.433, -38.886), 矢量(-108.946, 16.550, -110.585), 矢量(-121.455, 14.550,
			-102.134), 矢量(-94.810, 14.550, -114.972), 矢量(-70.678, 15.540, -1.360), 矢量(-25.004, 14.542, 5.888), 矢量(-22.905, 14.542, 1.661),
			矢量(-52.447, 13.540, -26.979), 矢量(-10.813, 17.550, -57.865), 矢量(-6.180, 15.550, -67.294), 矢量(20.865, 18.550, -80.430), 矢量(
			15.214, 18.550, -69.860), 矢量(20.510, 18.550, -69.179), 矢量(24.727, 18.550, -64.622), 矢量(30.621, 18.550, -75.128));
		全局.Healthkits = 数组(矢量(-0.509, 11.545, -49.747), 矢量(-15.592, 11.550, -58.205), 矢量(-30.555, 11.574, -39.988), 矢量(-14.883, 11.550,
			-21.102), 矢量(-17.322, 14.540, 4.140), 矢量(-40.862, 13.540, 25.241), 矢量(-69.465, 15.540, 2.218), 矢量(-39.551, 12.608, -40.093),
			矢量(-73.395, 11.567, -38.396), 矢量(-46.502, 10.255, -57.414), 矢量(-125.168, 11.550, -56.353), 矢量(-105.172, 16.550, -103.052), 矢量(
			-81.640, 14.550, -95.099));
		全局.ObjectiveA_Nodes = 数组(矢量(-54.907, 13.574, 21.648), 矢量(-56.303, 13.574, 20.432), 矢量(-57.615, 13.574, 18.510), 矢量(-58.849, 13.574,
			16.937), 矢量(-60.297, 13.574, 15.188), 矢量(-61.929, 13.574, 13.528), 矢量(-59.766, 13.574, 11.352), 矢量(-58.062, 13.574, 13.080),
			矢量(-56.551, 13.574, 14.614), 矢量(-55.110, 13.574, 16.070), 矢量(-53.497, 13.574, 17.712), 矢量(-52.265, 13.574, 18.995), 矢量(-49.944,
			13.574, 16.708), 矢量(-51.201, 13.574, 15.562), 矢量(-52.773, 13.574, 13.967), 矢量(-54.328, 13.574, 12.485), 矢量(-55.847, 13.574,
			10.999), 矢量(-57.591, 13.574, 9.272), 矢量(-55.853, 13.573, 7.360), 矢量(-54.024, 13.573, 8.948), 矢量(-52.370, 13.573, 10.604), 矢量(
			-50.940, 13.573, 12.034), 矢量(-49.305, 13.573, 13.671), 矢量(-48.108, 13.573, 14.867), 矢量(-45.892, 13.573, 12.610), 矢量(-46.960,
			13.550, 11.516), 矢量(-48.601, 13.540, 9.794), 矢量(-49.991, 13.540, 8.443), 矢量(-51.672, 13.540, 6.683), 矢量(-53.367, 13.575,
			4.898));
		全局.ObjectiveB_Nodes = 数组(矢量(-98.932, 13.650, -72.609), 矢量(-99.779, 13.650, -74.436), 矢量(-100.882, 13.551, -76.812), 矢量(-101.996,
			13.551, -79.128), 矢量(-103.070, 13.551, -81.358), 矢量(-104.357, 13.650, -84.031), 矢量(-105.217, 13.650, -85.680), 矢量(-102.654,
			13.650, -86.902), 矢量(-101.553, 13.650, -84.668), 矢量(-100.628, 13.650, -82.793), 矢量(-99.405, 13.650, -80.319), 矢量(-98.240,
			13.650, -78.031), 矢量(-97.071, 13.650, -75.711), 矢量(-96.176, 13.650, -73.894), 矢量(-93.883, 13.550, -75.049), 矢量(-94.844, 13.650,
			-77.011), 矢量(-95.955, 13.650, -79.260), 矢量(-97.135, 13.696, -81.494), 矢量(-98.215, 13.650, -83.682), 矢量(-99.277, 13.650,
			-85.842), 矢量(-100.234, 13.550, -87.766), 矢量(-97.555, 13.550, -89.086), 矢量(-96.620, 13.550, -87.190), 矢量(-95.482, 13.650,
			-84.874), 矢量(-93.312, 13.684, -80.612), 矢量(-92.148, 13.650, -78.256), 矢量(-91.198, 13.550, -76.312), 矢量(-88.307, 13.650,
			-77.736), 矢量(-89.251, 13.650, -79.644), 矢量(-90.452, 13.650, -82.040), 矢量(-91.538, 13.650, -84.237), 矢量(-92.537, 13.650,
			-86.244), 矢量(-93.718, 13.650, -88.599), 矢量(-94.713, 13.650, -90.569), 矢量(-92.105, 13.650, -91.834), 矢量(-91.149, 13.650,
			-89.917), 矢量(-90.044, 13.550, -87.675), 矢量(-88.973, 13.550, -85.507), 矢量(-87.867, 13.550, -83.271), 矢量(-86.745, 13.650,
			-81.001), 矢量(-85.724, 13.650, -78.934));
		全局.Chokepoint = 数组(矢量(-26.323, 11.474, -25.893), 矢量(-66.594, 13.341, -27.318), 矢量(-89.906, 13.550, -71.770), 矢量(-52.878, 11.829,
			-7.114));
		全局.Staircase_Top = 数组(矢量(-66.589, 13.405, -26.140), 矢量(-82.618, 13.501, -16.139), 矢量(-70.643, 15.542, -6.647), 矢量(-65.143, 15.540,
			-6.527), 矢量(-59.979, 15.542, 4.187), 矢量(-34.590, 15.540, -6.683), 矢量(-26.074, 14.540, 1.271), 矢量(-24.616, 16.540, 14.734), 矢量(
			-37.694, 17.516, 20.769), 矢量(-47.665, 17.540, 32.683), 矢量(-32.230, 13.254, 33.940), 矢量(-57.139, 13.446, -12.114), 矢量(-44.305,
			15.540, -18.183), 矢量(-39.479, 12.608, -28.553), 矢量(-53.137, 13.540, -32.498), 矢量(-49.383, 13.540, -27.547), 矢量(-9.602, 15.550,
			-68.980), 矢量(-8.132, 17.550, -60.216), 矢量(-5.678, 15.550, -36.848), 矢量(2.847, 12.946, -37.302), 矢量(-8.880, 12.832, -27.182),
			矢量(-55.398, 12.397, -63.327), 矢量(-61.802, 14.550, -76.613), 矢量(-62.077, 16.551, -89.961), 矢量(-77.293, 16.550, -94.813), 矢量(
			-100.875, 16.550, -101.828), 矢量(-106.802, 16.551, -98.947), 矢量(-82.695, 16.550, -89.036), 矢量(-80.155, 16.550, -83.716), 矢量(
			-103.237, 13.571, -53.511), 矢量(-120.158, 14.551, -81.422), 矢量(-102.386, 16.550, -111.738), 矢量(-113.796, 16.550, -106.208));
		全局.Staircase_Bottom = 数组(矢量(-69.609, 11.405, -32.632), 矢量(-85.103, 11.392, -20.781), 矢量(-75.034, 13.566, -10.562), 矢量(-61.208,
			13.525, -10.475), 矢量(-55.935, 13.575, 8.057), 矢量(-40.884, 11.575, -0.246), 矢量(-21.302, 11.572, -3.285), 矢量(-28.099, 14.540,
			10.863), 矢量(-34.271, 16.540, 24.479), 矢量(-36.035, 13.540, 33.813), 矢量(-29.453, 11.540, 36.633), 矢量(-51.467, 11.620, -5.333),
			矢量(-48.019, 13.540, -21.756), 矢量(-35.553, 11.476, -23.693), 矢量(-49.045, 12.608, -36.187), 矢量(-44.489, 12.608, -32.938), 矢量(
			-15.940, 11.550, -62.363), 矢量(-4.390, 15.550, -63.832), 矢量(-1.161, 12.946, -32.046), 矢量(3.562, 11.509, -41.938), 矢量(-17.665,
			11.549, -29.343), 矢量(-52.905, 10.449, -58.189), 矢量(-59.507, 12.550, -71.912), 矢量(-59.223, 14.548, -85.725), 矢量(-79.826, 14.550,
			-99.545), 矢量(-95.984, 14.550, -104.081), 矢量(-111.703, 14.548, -96.284), 矢量(-85.486, 13.550, -86.780), 矢量(-83.598, 13.550,
			-82.150), 矢量(-105.584, 11.550, -58.091), 矢量(-117.084, 11.550, -74.470), 矢量(-98.007, 14.550, -113.815), 矢量(-118.548, 14.550,
			-103.858));
		全局.Healthkits_Small = 数组(矢量(-15.592, 11.550, -58.205), 矢量(-30.555, 11.574, -39.988), 矢量(-14.883, 11.550, -21.102), 矢量(-17.322,
			14.540, 4.140), 矢量(-40.862, 13.540, 25.241), 矢量(-39.551, 12.608, -40.093), 矢量(-73.395, 11.567, -38.396), 矢量(-46.502, 10.255,
			-57.414), 矢量(-105.172, 16.550, -103.052), 矢量(-81.640, 14.550, -95.099));
		全局.Healthkits_Large = 数组(矢量(-0.509, 11.545, -49.747), 矢量(-69.465, 15.540, 2.218), 矢量(-125.168, 11.550, -56.353));
		全局.Staircase_Middle = 数组(0, 0, 0, 0, 0, 0, 0, 0, 0, 矢量(-42.432, 15.540, 37.130), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			矢量(-83.750, 15.175, -86.309), 矢量(-82.981, 15.175, -84.748), 0, 0, 0, 0);
	}
}

规则("Temple Of Anubis")
{
	事件
	{
		子程序;
		Temple_of_Anubus;
	}

	动作
	{
		全局.Path_Nodes = 数组(矢量(3.981, 3.323, -36.909), 矢量(8.605, 3.323, -40.174), 矢量(10.350, 2.380, -39.130), 矢量(9.493, 2.323, -32.820), 矢量(
			16.271, 2.323, -28.814), 矢量(11.492, 2.323, -25.745), 矢量(12.426, 2.323, -22.622), 矢量(7.483, 2.323, -22.075), 矢量(4.930, 2.323,
			-34.192), 矢量(-0.946, 2.323, -27.882), 矢量(-0.890, 2.323, -31.785), 矢量(-15.634, -0.714, -40.979), 矢量(-24.713, -0.731, -33.487),
			矢量(18.208, 2.323, -18.646), 矢量(26.765, 2.134, -12.078), 矢量(15.455, 1.629, 7.748), 矢量(-0.603, -0.850, -7.807), 矢量(-8.120,
			-0.646, -14.031), 矢量(-4.440, 0.061, -20.606), 矢量(-10.896, -0.382, -21.944), 矢量(-15.909, -0.172, -11.113), 矢量(-6.120, -1.241,
			-2.344), 矢量(-2.388, -1.241, 1.979), 矢量(2.731, -1.241, 2.453), 矢量(0.592, 2.513, 13.336), 矢量(3.717, 2.730, 18.015), 矢量(14.922,
			5.657, 12.658), 矢量(-7.994, 2.654, 9.724), 矢量(-7.889, 3.091, 2.076), 矢量(-1.576, 3.226, 0.606), 矢量(0.355, 3.079, 6.900), 矢量(
			-7.572, 2.498, 14.516), 矢量(-13.043, 2.554, 11.881), 矢量(-21.034, 2.402, 1.635), 矢量(-22.778, 2.577, -3.143), 矢量(-25.375, -0.728,
			-14.787), 矢量(-18.387, -0.509, -24.928), 矢量(-27.084, -0.728, -25.613), 矢量(-6.457, 2.629, 19.267), 矢量(-1.267, 2.589, 26.096), 矢量(
			2.813, 2.473, 28.497), 矢量(-15.921, 6.061, 38.065), 矢量(-19.987, 6.061, 28.189), 矢量(-28.536, 6.191, 37.751), 矢量(-28.941, 3.015,
			19.977), 矢量(-24.721, 2.059, 14.081), 矢量(-19.301, 2.135, 17.240), 矢量(-14.574, 2.289, 21.322), 矢量(-10.462, 2.423, 19.912), 矢量(
			-15.463, 2.406, 17.225), 矢量(-30.817, 8.060, 27.353), 矢量(-32.288, 8.060, 29.569), 矢量(-10.741, 2.335, 28.327), 矢量(-19.667, 2.243,
			24.550), 矢量(-30.630, 2.881, 27.033), 矢量(-34.976, 7.081, 23.741), 矢量(-43.375, 11.059, 16.044), 矢量(-52.130, 11.059, 27.075), 矢量(
			-48.726, 11.059, 36.395), 矢量(-52.483, 11.081, 36.699), 矢量(-46.487, 11.093, 33.530), 矢量(-60.800, 8.059, 43.578), 矢量(-57.557,
			8.089, 43.809), 矢量(-57.066, 3.050, 44.937), 矢量(-62.014, 3.070, 47.782), 矢量(-56.681, 3.070, 53.479), 矢量(-52.138, 3.103, 48.145),
			矢量(-51.954, 3.060, 40.871), 矢量(-33.749, 2.892, 33.908), 矢量(-37.396, 3.065, 38.026), 矢量(-37.841, 3.215, 45.675), 矢量(-33.353,
			3.540, 50.425), 矢量(-39.317, 3.050, 55.631), 矢量(-43.026, 3.092, 53.282), 矢量(-36.401, 7.050, 62.855), 矢量(-32.103, 7.050, 60.790),
			矢量(-33.309, 7.550, 67.096), 矢量(-30.712, 2.873, 40.070), 矢量(-24.408, 2.905, 46.099), 矢量(-32.954, 3.129, 61.572), 矢量(-36.044,
			3.050, 61.034), 矢量(-39.771, 3.050, 65.068), 矢量(-36.733, 3.075, 75.030), 矢量(-38.827, 3.050, 70.155), 矢量(-31.122, 3.075, 73.341),
			矢量(-27.624, 3.047, 71.465), 矢量(-32.392, 3.025, 65.569), 矢量(-26.918, 3.022, 58.088), 矢量(-19.399, 2.876, 52.859), 矢量(-15.577,
			2.849, 57.189), 矢量(-21.410, 3.060, 61.128), 矢量(-22.348, 3.116, 68.305), 矢量(-17.301, 3.072, 67.891), 矢量(-4.031, 5.541, 74.734),
			矢量(0.158, 5.065, 68.868), 矢量(-0.355, 5.061, 62.586), 矢量(6.359, 5.081, 61.843), 矢量(6.836, 5.156, 67.564), 矢量(7.588, 5.172,
			74.153), 矢量(5.893, 6.050, 55.047), 矢量(0.450, 6.729, 55.455), 矢量(-8.055, 7.114, 58.641), 矢量(-9.808, 5.541, 79.612), 矢量(-17.036,
			6.228, 77.519), 矢量(-26.804, 6.210, 79.479), 矢量(-28.017, 7.153, 75.910), 矢量(-28.048, 7.692, 72.809), 矢量(-25.347, 6.166, 87.880),
			矢量(-24.884, 6.214, 96.300), 矢量(-24.551, 7.114, 97.304), 矢量(-15.897, 6.206, 96.733), 矢量(-9.422, 6.290, 95.581), 矢量(-9.440,
			6.212, 86.866), 矢量(-15.127, 6.248, 87.442), 矢量(-3.545, 5.255, 86.524), 矢量(-0.059, 4.442, 86.523), 矢量(5.385, 5.610, 80.748), 矢量(
			5.259, 4.755, 83.488), 矢量(10.720, 3.949, 88.664), 矢量(13.633, 2.050, 99.483), 矢量(8.396, 2.062, 99.683), 矢量(17.627, 3.949,
			89.987), 矢量(9.366, 5.963, 113.623), 矢量(3.903, 6.137, 114.078), 矢量(17.169, 5.963, 114.495), 矢量(12.348, 6.384, 118.744), 矢量(
			9.042, 5.963, 121.403), 矢量(10.482, 6.043, 129.826), 矢量(-4.997, 6.046, 130.729), 矢量(-4.456, 6.049, 137.092), 矢量(-9.985, 5.845,
			142.967), 矢量(-27.474, 6.121, 117.348), 矢量(-19.323, 6.229, 116.260), 矢量(4.633, 2.235, 96.479), 矢量(2.424, 2.221, 94.692), 矢量(
			-1.624, 1.990, 95.833), 矢量(-0.395, 2.204, 101.059), 矢量(-4.311, 1.251, 100.651), 矢量(-8.874, 1.462, 100.141), 矢量(-31.983, 6.193,
			118.172), 矢量(-32.557, 5.975, 126.376), 矢量(-26.233, 6.017, 122.403), 矢量(-11.845, 5.790, 118.647), 矢量(-11.527, 5.534, 122.531),
			矢量(-1.970, 5.510, 121.602), 矢量(-2.264, 5.985, 116.813), 矢量(-7.631, 6.187, 103.042), 矢量(-5.482, 6.302, 99.548), 矢量(-11.554,
			6.302, 101.527), 矢量(-16.427, 7.970, 63.699), 矢量(-21.298, 7.980, 56.825), 矢量(-27.662, 7.970, 62.615), 矢量(-22.902, 7.970,
			68.593), 矢量(-22.380, 7.938, 63.189), 矢量(-39.888, 11.750, 48.453), 矢量(-35.548, 11.750, 44.434), 矢量(-32.051, 11.750, 44.322), 矢量(
			-30.578, 10.565, 56.892), 矢量(-34.230, 11.458, 54.471), 矢量(-37.331, 11.750, 50.471), 矢量(-69.532, 4.061, 16.988), 矢量(-60.928,
			3.120, 26.062), 矢量(-53.098, 3.059, 24.147), 矢量(-53.333, 3.059, 31.413), 矢量(-48.663, 3.059, 34.396), 矢量(-51.478, 7.059, 18.654),
			矢量(-53.466, 7.059, 22.836), 矢量(-51.231, 7.059, 27.175), 矢量(-45.086, 7.059, 27.581), 矢量(9.932, 1.043, 6.803), 矢量(12.893, 2.012,
			-1.957), 矢量(21.167, 2.240, -1.299), 矢量(8.927, -0.467, -6.854), 矢量(-50.751, 9.061, 9.389), 矢量(-32.089, 11.999, 12.426), 矢量(
			-35.142, 12.164, 10.512), 矢量(-36.974, 10.581, 7.241), 矢量(-14.463, 7.872, 50.566), 矢量(-19.466, 7.882, 46.827), 矢量(-24.838,
			9.570, 47.644), 矢量(-24.612, 9.570, 43.614), 矢量(-11.194, 12.095, 55.267), 矢量(-14.940, 12.330, 53.198), 矢量(-41.856, 7.059,
			23.780), 矢量(-42.888, 7.059, 16.896), 矢量(-63.841, 4.061, 23.340), 矢量(16.505, 5.963, 108.744), 矢量(18.433, 3.949, 96.748), 矢量(
			3.584, 2.362, 100.386), 矢量(-13.022, 7.981, 126.966));
		全局.Healthkits = 数组(矢量(5.912, 2.872, 19.910), 矢量(-24.755, 2.698, -1.502), 矢量(-4.915, 4.059, 45.586), 矢量(-23.210, 2.059, 15.523), 矢量(
			-39.251, 6.559, 7.032), 矢量(-42.641, 11.059, 24.406), 矢量(-37.764, 3.050, 57.758), 矢量(-35.661, 3.050, 69.597), 矢量(12.072, 5.157,
			67.239), 矢量(-16.997, 6.284, 84.687), 矢量(17.615, 3.949, 88.212), 矢量(-3.417, -1.241, 3.664));
		全局.ObjectiveA_Nodes = 数组(矢量(-36.757, 3.147, 42.370), 矢量(-37.965, 3.079, 40.849), 矢量(-39.285, 3.076, 39.355), 矢量(-40.772, 3.061,
			37.639), 矢量(-42.138, 3.062, 35.980), 矢量(-44.330, 3.062, 34.055), 矢量(-46.118, 3.062, 36.096), 矢量(-44.008, 3.062, 37.972), 矢量(
			-42.348, 3.060, 39.474), 矢量(-40.736, 3.074, 40.918), 矢量(-39.129, 3.102, 42.178), 矢量(-38.042, 3.150, 43.861), 矢量(-39.465, 3.071,
			45.391), 矢量(-40.712, 3.063, 43.912), 矢量(-42.203, 3.055, 42.529), 矢量(-43.741, 3.216, 41.148), 矢量(-45.241, 3.059, 39.342), 矢量(
			-47.414, 3.036, 37.468), 矢量(-49.234, 3.059, 39.410), 矢量(-47.028, 3.217, 41.373), 矢量(-43.751, 3.218, 44.312), 矢量(-42.195, 3.054,
			45.710), 矢量(-40.796, 3.067, 46.961), 矢量(-42.553, 3.075, 49.020), 矢量(-43.952, 3.052, 47.813), 矢量(-45.521, 3.052, 46.594), 矢量(
			-47.086, 3.218, 45.320), 矢量(-48.933, 3.054, 43.795), 矢量(-51.140, 3.056, 41.998), 矢量(-52.591, 3.053, 43.785), 矢量(-50.495, 3.053,
			45.606), 矢量(-48.715, 3.053, 47.133), 矢量(-47.163, 3.053, 48.476), 矢量(-45.624, 3.053, 49.811), 矢量(-47.072, 3.053, 51.385), 矢量(
			-48.559, 3.053, 49.942), 矢量(-49.917, 3.053, 48.451), 矢量(-51.422, 3.053, 47.123), 矢量(-53.797, 3.053, 45.086));
		全局.ObjectiveB_Nodes = 数组(矢量(-15.756, 6.268, 108.684), 矢量(-13.478, 6.214, 108.545), 矢量(-10.715, 6.214, 108.583), 矢量(-7.856, 6.204,
			108.408), 矢量(-4.389, 6.214, 108.211), 矢量(-1.249, 6.202, 107.946), 矢量(1.340, 6.239, 107.744), 矢量(1.623, 6.237, 109.881), 矢量(
			-0.996, 6.210, 110.191), 矢量(-4.080, 6.215, 110.470), 矢量(-7.676, 6.212, 110.799), 矢量(-10.584, 6.212, 111.059), 矢量(-13.263,
			6.212, 111.296), 矢量(-15.618, 6.212, 111.507), 矢量(-13.097, 6.213, 113.981), 矢量(-10.375, 6.213, 113.748), 矢量(-3.727, 6.230,
			113.351), 矢量(-0.782, 6.226, 113.091), 矢量(1.847, 6.218, 112.702), 矢量(2.119, 6.308, 115.769), 矢量(-0.514, 6.212, 116.019), 矢量(
			-3.513, 6.229, 116.574), 矢量(-10.114, 6.321, 116.696), 矢量(-12.970, 6.081, 116.462), 矢量(-15.330, 6.311, 116.864));
		全局.Chokepoint = 数组(矢量(-14.707, 2.272, 21.863), 矢量(-24.614, 2.904, 46.126), 矢量(-9.977, 5.992, 81.221));
		全局.Staircase_Top = 数组(矢量(-3.666, 2.323, -33.916), 矢量(2.980, 2.107, -19.888), 矢量(2.372, 2.548, 11.957), 矢量(-13.535, 2.568, 2.542),
			矢量(-11.242, 6.059, 41.424), 矢量(-30.214, 8.059, 29.618), 矢量(-33.095, 8.059, 27.499), 矢量(-47.788, 9.059, 8.619), 矢量(-45.700,
			11.059, 14.656), 矢量(-56.188, 11.059, 33.531), 矢量(-53.356, 7.065, 16.308), 矢量(-39.915, 7.050, 62.610), 矢量(-15.650, 5.541,
			74.024), 矢量(-10.516, 5.541, 72.131), 矢量(5.835, 4.129, 87.591), 矢量(13.765, 3.949, 89.378), 矢量(10.637, 5.970, 105.237), 矢量(
			-17.988, 6.207, 95.938), 矢量(-20.288, 6.228, 112.201), 矢量(-32.499, 6.213, 113.307), 矢量(-25.391, 7.958, 113.667), 矢量(-12.478,
			7.950, 131.274), 矢量(-18.351, 7.833, 127.092));
		全局.Staircase_Bottom = 数组(矢量(-9.657, -0.542, -38.438), 矢量(-1.354, -0.304, -13.540), 矢量(5.572, -1.073, 2.118), 矢量(-8.900, -1.024,
			-4.716), 矢量(-0.388, 2.365, 36.979), 矢量(-26.104, 6.059, 32.058), 矢量(-41.571, 3.063, 34.328), 矢量(-31.628, 3.088, 18.714), 矢量(
			-49.973, 9.059, 11.921), 矢量(-60.067, 8.059, 40.308), 矢量(-59.104, 3.061, 22.845), 矢量(-46.053, 3.047, 55.888), 矢量(-22.043, 3.087,
			73.851), 矢量(-10.685, 3.209, 65.885), 矢量(5.740, 2.351, 93.471), 矢量(13.565, 2.050, 94.388), 矢量(18.057, 3.949, 103.797), 矢量(
			-10.917, 1.896, 102.119), 矢量(-20.757, 4.262, 106.789), 矢量(-22.053, 4.233, 105.076), 矢量(-28.078, 5.189, 108.631), 矢量(-12.126,
			5.927, 135.817), 矢量(-22.279, 6.028, 127.485));
		全局.Healthkits_Small = 数组(矢量(-23.210, 2.059, 15.523), 矢量(-39.251, 6.559, 7.032), 矢量(-37.764, 3.050, 57.758), 矢量(-16.997, 6.284,
			84.687), 矢量(17.615, 3.949, 88.212), 矢量(-3.417, -1.241, 3.664));
		全局.Healthkits_Large = 数组(矢量(-24.755, 2.698, -1.502), 矢量(-4.915, 4.059, 45.586), 矢量(-42.641, 11.059, 24.406), 矢量(-35.661, 3.050,
			69.597), 矢量(12.072, 5.157, 67.239), 矢量(-8.047, 1.349, 101.431));
		全局.Staircase_Middle = 数组(0, 0, 矢量(6.662, 0.257, 6.227), 0, 矢量(-5.720, 4.061, 44.082), 0, 矢量(-36.168, 7.059, 25.708), 矢量(-40.513,
			6.561, 12.611), 0, 0, 0, 0, 0, 0, 0, 0, 0, 矢量(-16.532, 4.003, 102.663), 0, 矢量(-32.677, 5.188, 107.469), 矢量(-26.313, 6.690,
			111.105), 0, 0);
	}
}

规则("Volskaya")
{
	事件
	{
		子程序;
		Volskaya;
	}

	动作
	{
		全局.Path_Nodes = 数组(矢量(19.115, -3.430, -7.029), 矢量(22.230, -3.430, -2.728), 矢量(11.664, -3.430, 0.382), 矢量(14.471, -3.430, 3.732),
			矢量(14.699, -3.430, 8.417), 矢量(22.479, -3.430, 16.681), 矢量(12.294, -3.430, 11.616), 矢量(8.697, -3.430, 14.177), 矢量(3.268, -3.430,
			10.937), 矢量(1.857, -3.430, 5.124), 矢量(6.298, -3.430, 0.208), 矢量(-11.676, -5.429, 0.889), 矢量(-18.760, -5.429, 3.040), 矢量(
			-21.062, -4.971, 12.861), 矢量(-20.263, -4.237, 17.439), 矢量(-8.611, -4.224, 16.377), 矢量(-4.076, -4.398, 19.473), 矢量(5.244,
			-3.553, 28.582), 矢量(9.836, -3.284, 30.330), 矢量(9.762, -2.620, 44.645), 矢量(4.051, -2.832, 48.484), 矢量(2.942, -2.681, 39.472),
			矢量(-7.610, -2.680, 35.937), 矢量(-16.961, -2.628, 36.414), 矢量(-3.939, -2.680, 32.992), 矢量(-8.027, -2.680, 29.489), 矢量(-12.501,
			-2.628, 32.243), 矢量(-12.119, -3.299, 26.815), 矢量(-8.182, -3.654, 26.154), 矢量(-4.488, -3.421, 26.550), 矢量(-6.737, -4.198,
			23.789), 矢量(-17.288, -4.266, 23.026), 矢量(-24.407, -3.485, 34.104), 矢量(-26.350, -4.067, 25.506), 矢量(-39.582, -1.430, 29.641),
			矢量(-39.076, -1.430, 34.137), 矢量(-34.752, -1.430, 34.769), 矢量(-36.102, -1.430, 44.520), 矢量(-27.377, -1.665, 51.362), 矢量(-24.035,
			-2.852, 38.069), 矢量(-21.062, -2.126, 48.056), 矢量(-8.842, -2.083, 51.688), 矢量(-34.931, -1.006, 50.911), 矢量(-35.597, -3.430,
			13.048), 矢量(-37.508, 3.570, 31.484), 矢量(-36.800, 3.570, 37.948), 矢量(-28.547, 3.563, 39.603), 矢量(-13.882, -1.749, 59.083), 矢量(
			-18.960, -1.022, 61.353), 矢量(-27.312, -0.431, 61.504), 矢量(-29.990, -0.431, 55.102), 矢量(-33.174, 3.570, 73.803), 矢量(-29.789,
			3.570, 70.053), 矢量(-29.618, 3.647, 73.484), 矢量(-29.774, 3.647, 76.796), 矢量(-32.812, 3.658, 81.164), 矢量(-27.768, -1.210,
			65.839), 矢量(-23.880, -1.568, 67.878), 矢量(-18.624, -1.749, 68.276), 矢量(-10.463, -1.749, 69.855), 矢量(-4.385, -1.561, 61.387), 矢量(
			8.200, -1.430, 57.782), 矢量(10.041, -0.519, 58.129), 矢量(13.625, -0.430, 63.177), 矢量(17.154, -0.430, 59.680), 矢量(16.029, -0.430,
			53.548), 矢量(12.763, -0.430, 72.434), 矢量(8.652, -1.155, 72.616), 矢量(-1.985, -1.749, 73.489), 矢量(-21.524, -1.729, 74.117), 矢量(
			-21.985, -2.470, 83.259), 矢量(-12.122, -2.441, 83.034), 矢量(-1.233, -2.069, 77.713), 矢量(-5.982, -2.422, 86.552), 矢量(-1.490,
			-2.678, 85.267), 矢量(-5.985, -2.496, 97.820), 矢量(0.555, -2.155, 101.041), 矢量(13.199, -2.431, 100.697), 矢量(1.895, 3.470, 92.466),
			矢量(-2.446, 3.470, 95.443), 矢量(-2.646, 3.730, 91.519), 矢量(-0.875, 3.470, 87.720), 矢量(2.134, 3.470, 85.156), 矢量(3.405, 3.629,
			102.223), 矢量(-0.787, 3.745, 102.271), 矢量(1.488, 3.570, 107.651), 矢量(-2.600, 2.921, 107.674), 矢量(-14.028, 2.570, 106.908), 矢量(
			-11.756, 2.570, 109.268), 矢量(-16.404, 2.572, 109.223), 矢量(-5.354, 2.572, 109.220), 矢量(-21.352, 2.734, 109.327), 矢量(-24.403,
			3.035, 107.370), 矢量(-27.815, 3.570, 107.400), 矢量(-27.825, 3.570, 98.466), 矢量(-25.630, 3.619, 94.885), 矢量(-25.730, 3.739,
			100.670), 矢量(-32.857, 3.570, 98.650), 矢量(-32.793, 3.570, 93.471), 矢量(-34.153, 3.570, 89.847), 矢量(-34.120, 3.570, 84.913), 矢量(
			-38.475, 3.570, 97.230), 矢量(-26.195, -2.313, 89.096), 矢量(-30.969, -2.430, 88.744), 矢量(-31.784, -2.430, 94.464), 矢量(-31.871,
			-2.496, 104.348), 矢量(-20.520, -2.463, 97.590), 矢量(-22.432, -1.430, 117.197), 矢量(-6.448, -1.430, 117.760), 矢量(-7.472, -2.496,
			102.167), 矢量(-13.216, -2.145, 102.533), 矢量(-11.458, 2.820, 77.646), 矢量(-11.432, 2.820, 73.925), 矢量(-6.518, 2.820, 74.816), 矢量(
			-14.983, 2.820, 74.133), 矢量(-16.582, 2.820, 80.687), 矢量(-11.038, 2.820, 81.130), 矢量(-5.433, 2.829, 81.280), 矢量(-18.550, 3.493,
			78.386), 矢量(27.165, -2.496, 70.183), 矢量(26.335, -2.496, 80.215), 矢量(23.501, -2.496, 86.816), 矢量(18.358, -2.430, 86.412), 矢量(
			22.929, -2.496, 101.479), 矢量(26.751, 2.570, 76.861), 矢量(24.187, 2.570, 89.587), 矢量(24.067, 2.570, 87.145), 矢量(-42.591, 3.570,
			97.319), 矢量(-39.044, -2.611, 72.881), 矢量(-48.146, -2.377, 78.117), 矢量(-49.160, -2.491, 88.289), 矢量(-52.001, -3.425, 97.925),
			矢量(-44.252, -3.429, 103.582), 矢量(-35.421, -2.496, 103.709), 矢量(-59.423, -2.805, 94.053), 矢量(-64.304, -2.516, 91.043), 矢量(
			-61.286, -2.430, 85.605), 矢量(-55.635, -2.611, 76.016), 矢量(-50.681, -2.611, 64.123), 矢量(-45.950, -1.672, 60.850), 矢量(-44.236,
			-1.430, 57.024), 矢量(-50.469, -1.430, 48.442), 矢量(-54.643, -1.430, 46.464), 矢量(-60.676, -1.430, 55.062), 矢量(-58.174, -1.759,
			57.155), 矢量(-58.453, -2.611, 63.954), 矢量(-65.071, -2.611, 73.381), 矢量(-72.684, -2.430, 77.054), 矢量(-72.353, -1.782, 73.187),
			矢量(-67.753, -1.430, 65.880), 矢量(-72.919, -0.306, 62.034), 矢量(-70.812, -1.118, 63.298), 矢量(-64.567, 3.570, 90.686), 矢量(-61.703,
			3.570, 86.465), 矢量(-55.084, 3.570, 89.111), 矢量(-49.589, 3.570, 92.694), 矢量(-57.612, -1.430, 42.940), 矢量(-70.114, -0.930,
			37.522), 矢量(-71.164, -0.930, 33.723), 矢量(-67.720, -0.930, 29.147), 矢量(-63.522, -0.930, 29.934), 矢量(-59.719, -0.930, 33.152),
			矢量(-64.327, -0.928, 39.841), 矢量(-78.440, -0.430, 49.353), 矢量(-75.832, -0.430, 56.011), 矢量(-71.642, -0.430, 50.749), 矢量(-85.049,
			-2.426, 73.341), 矢量(-100.962, 3.740, 71.803), 矢量(-97.911, 3.572, 73.851), 矢量(-96.376, 3.572, 68.467), 矢量(-94.627, 3.572,
			64.339), 矢量(-91.831, 3.572, 60.689), 矢量(-91.449, 3.572, 56.255), 矢量(-87.742, 3.648, 58.282), 矢量(-114.645, 3.570, 71.778), 矢量(
			-110.376, 3.570, 67.612), 矢量(-110.628, 3.570, 64.171), 矢量(-118.235, -0.430, 53.423), 矢量(-111.705, -0.312, 48.345), 矢量(-114.968,
			-0.430, 49.214), 矢量(-121.906, -0.430, 45.480), 矢量(-125.369, -0.430, 47.922), 矢量(-130.214, -0.430, 45.053), 矢量(-132.296, -0.430,
			41.671), 矢量(-128.938, 0.569, 38.694), 矢量(-126.317, 0.569, 34.896), 矢量(-127.048, 0.569, 27.394), 矢量(-120.549, 0.544, 33.474),
			矢量(-118.477, 0.569, 28.308), 矢量(-110.779, -0.430, 26.838), 矢量(-105.563, -0.430, 18.547), 矢量(-98.086, -0.926, 23.022), 矢量(
			-102.348, -0.930, 30.017), 矢量(-99.669, -0.428, 32.314), 矢量(-108.673, -0.930, 40.380), 矢量(-101.363, -0.430, 44.968), 矢量(-87.883,
			-0.928, 28.724), 矢量(-88.885, -0.926, 39.396), 矢量(-90.959, -0.431, 43.016), 矢量(-81.479, -0.930, 31.166), 矢量(-77.959, -0.930,
			26.831), 矢量(-91.098, 3.570, 27.544), 矢量(-93.702, 3.572, 26.169), 矢量(-96.730, 3.572, 33.281), 矢量(-88.770, 3.572, 38.644), 矢量(
			-89.840, 3.748, 35.584), 矢量(-89.765, 3.674, 40.430), 矢量(-84.789, 3.570, 36.290), 矢量(-81.440, 3.572, 43.105), 矢量(-83.322, 3.572,
			46.807), 矢量(-83.438, 3.579, 50.769), 矢量(-87.071, 3.579, 49.076), 矢量(-100.021, 3.570, 38.536), 矢量(-102.446, 3.811, 46.669), 矢量(
			-100.670, 3.570, 43.478), 矢量(-103.527, 3.811, 41.706), 矢量(-105.813, 3.687, 45.358), 矢量(-102.850, 3.570, 43.959), 矢量(-107.396,
			3.570, 51.111), 矢量(-107.256, 3.570, 56.993), 矢量(-85.044, -0.430, 51.472), 矢量(-88.646, -0.430, 56.284), 矢量(-82.544, -0.430,
			64.078), 矢量(-85.334, -0.430, 58.812), 矢量(-80.393, -0.430, 54.047), 矢量(-92.247, -2.430, 67.260), 矢量(-91.255, -2.430, 71.294),
			矢量(-95.775, -2.430, 73.729), 矢量(-98.958, -2.430, 71.734), 矢量(-96.375, -2.430, 66.994), 矢量(-104.341, -2.430, 67.574), 矢量(
			-100.997, -2.430, 62.125), 矢量(-99.738, -1.496, 60.514), 矢量(-98.738, -0.572, 58.960), 矢量(-97.045, -0.430, 56.735), 矢量(-77.591,
			-0.430, 68.752), 矢量(-84.202, -0.424, 78.688), 矢量(-89.661, -0.428, 87.233), 矢量(-71.214, 4.070, 53.689), 矢量(-75.097, 4.206,
			51.640), 矢量(-74.899, 4.248, 48.094), 矢量(-72.378, 4.230, 43.876), 矢量(-70.052, 4.070, 40.810), 矢量(-66.459, 4.176, 42.616), 矢量(
			-62.366, 4.184, 45.114), 矢量(-70.425, 4.070, 51.319), 矢量(36.345, 0.571, -1.508), 矢量(20.374, 0.571, -19.592), 矢量(16.709, -3.429,
			-16.537), 矢量(12.904, -3.429, -12.422), 矢量(7.833, -3.430, -8.829), 矢量(14.164, -3.430, -2.900), 矢量(17.368, -3.430, 1.821), 矢量(
			23.297, -3.430, 9.172), 矢量(28.363, -3.430, 5.357), 矢量(33.231, -3.430, 1.222), 矢量(21.637, -3.430, 20.256), 矢量(16.074, -3.423,
			24.850), 矢量(0.806, -3.430, -7.881), 矢量(-16.527, 3.777, 30.641), 矢量(-17.308, 3.599, 43.815), 矢量(0.360, 3.642, 43.351), 矢量(0.495,
			3.591, 30.902), 矢量(7.388, 2.422, 43.116), 矢量(7.267, 2.346, 35.081), 矢量(-8.600, 4.136, 43.313), 矢量(-17.816, 4.517, 57.624), 矢量(
			-17.825, 4.517, 53.402), 矢量(7.155, 3.660, 92.643), 矢量(13.680, -0.430, 78.444), 矢量(-67.330, 3.570, 81.924), 矢量(-82.751, 1.570,
			20.028));
		全局.Healthkits = 数组(矢量(-39.628, -1.430, 24.338), 矢量(-8.106, -2.590, 37.492), 矢量(17.732, -3.427, 45.712), 矢量(20.840, -0.430, 55.596),
			矢量(16.939, -2.430, 94.748), 矢量(-33.316, -2.430, 88.370), 矢量(-13.976, -1.430, 117.541), 矢量(-15.840, -2.430, 78.587), 矢量(-30.393,
			-0.430, 53.872), 矢量(-65.422, 3.570, 83.113), 矢量(-64.234, -2.430, 82.749), 矢量(-73.366, -0.930, 32.706), 矢量(-69.632, -0.430,
			46.764), 矢量(-109.866, -0.430, 55.291), 矢量(-91.409, -2.430, 63.145), 矢量(-96.973, -0.430, 33.606));
		全局.ObjectiveA_Nodes = 数组(矢量(-7.769, -2.289, 85.207), 矢量(-7.815, -2.289, 87.377), 矢量(-7.840, -2.289, 89.852), 矢量(-7.870, -2.289,
			92.546), 矢量(-7.896, -2.289, 95.101), 矢量(-10.586, -2.289, 95.080), 矢量(-10.507, -2.289, 92.481), 矢量(-10.507, -2.298, 89.904), 矢量(
			-10.502, -2.289, 87.292), 矢量(-10.497, -2.289, 85.103), 矢量(-13.432, -2.289, 85.104), 矢量(-13.432, -2.310, 87.354), 矢量(-13.432,
			-2.144, 89.979), 矢量(-13.433, -2.160, 92.463), 矢量(-13.413, -2.291, 94.941), 矢量(-16.509, -2.291, 94.941), 矢量(-16.509, -2.293,
			92.276), 矢量(-16.509, -2.316, 89.911), 矢量(-16.509, -2.289, 87.247), 矢量(-16.505, -2.289, 85.047), 矢量(-19.485, -2.289, 85.047),
			矢量(-19.485, -2.289, 87.273), 矢量(-19.485, -2.289, 89.919), 矢量(-19.484, -2.289, 92.403), 矢量(-19.484, -2.289, 95.021));
		全局.ObjectiveB_Nodes = 数组(矢量(-85.259, -0.430, 47.489), 矢量(-87.578, -0.430, 46.107), 矢量(-90.244, -0.430, 44.475), 矢量(-92.404, -0.430,
			43.138), 矢量(-94.466, -0.430, 41.875), 矢量(-96.901, -0.430, 40.386), 矢量(-98.394, -0.430, 42.773), 矢量(-95.954, -0.430, 44.219),
			矢量(-93.803, -0.430, 45.536), 矢量(-91.720, -0.430, 46.812), 矢量(-88.960, -0.430, 48.498), 矢量(-86.710, -0.430, 49.878), 矢量(-88.119,
			-0.430, 52.264), 矢量(-90.392, -0.430, 50.855), 矢量(-93.176, 0.659, 49.149), 矢量(-95.257, 0.541, 47.899), 矢量(-97.430, -0.430,
			46.608), 矢量(-99.799, -0.430, 45.150), 矢量(-101.640, -0.430, 48.130), 矢量(-99.006, -0.430, 49.694), 矢量(-97.037, -0.430, 50.902),
			矢量(-94.790, -0.430, 52.278), 矢量(-92.267, -0.430, 53.823), 矢量(-89.944, -0.430, 55.238), 矢量(-91.288, -0.430, 57.447), 矢量(-93.702,
			-0.430, 55.975), 矢量(-96.241, -0.430, 54.421), 矢量(-98.429, -0.430, 53.079), 矢量(-100.506, -0.430, 51.832), 矢量(-102.906, -0.430,
			50.366), 矢量(-103.862, -0.430, 51.903), 矢量(-101.452, -0.430, 53.374), 矢量(-99.312, -0.430, 54.687), 矢量(-97.289, -0.430, 55.928),
			矢量(-94.725, -0.430, 57.466), 矢量(-92.310, -0.430, 58.923));
		全局.Chokepoint = 数组(矢量(-9.119, -1.626, 54.718), 矢量(-33.496, -1.974, 73.884), 矢量(-71.918, -0.479, 62.658));
		全局.Staircase_Top = 数组(矢量(27.686, -1.430, -10.888), 矢量(23.336, 0.570, -18.080), 矢量(34.674, 0.570, -5.313), 矢量(-2.188, -3.429,
			-7.196), 矢量(-30.642, -3.430, 6.991), 矢量(-43.221, -1.430, 22.742), 矢量(-47.084, 3.570, 24.521), 矢量(-33.596, -1.430, 27.320), 矢量(
			9.408, 3.569, 90.964), 矢量(24.269, 2.569, 72.754), 矢量(-5.994, -1.430, 108.300), 矢量(-7.298, -1.430, 113.788), 矢量(-13.958, -1.430,
			117.341), 矢量(-20.271, -1.431, 113.485), 矢量(-21.869, -1.430, 108.011), 矢量(-38.808, 3.570, 93.752), 矢量(-32.475, 3.604, 64.814),
			矢量(-43.518, 3.597, 91.647), 矢量(-70.587, 3.570, 91.748), 矢量(-65.994, 4.079, 52.743), 矢量(-81.074, -0.424, 66.465), 矢量(-86.667,
			-0.430, 63.666), 矢量(-102.093, 3.570, 79.628), 矢量(-110.662, 3.570, 61.378), 矢量(-80.923, 1.571, 23.151), 矢量(-90.132, 3.570,
			23.134));
		全局.Staircase_Bottom = 数组(矢量(23.420, -3.430, -7.475), 矢量(26.596, -1.430, -14.508), 矢量(31.330, -1.430, -8.959), 矢量(-6.437, -5.430,
			-3.685), 矢量(-25.602, -5.440, 6.907), 矢量(-43.185, -3.430, 17.558), 矢量(-45.096, -1.429, 28.211), 矢量(-28.934, -3.429, 27.227), 矢量(
			13.732, -2.430, 87.731), 矢量(17.714, -0.314, 72.481), 矢量(-5.988, -2.496, 104.790), 矢量(-10.278, -2.496, 113.708), 矢量(-14.020,
			-2.496, 113.559), 矢量(-17.397, -2.496, 113.666), 矢量(-21.813, -2.491, 105.020), 矢量(-32.420, -2.377, 83.668), 矢量(-32.424, -0.430,
			56.062), 矢量(-42.925, -2.430, 78.816), 矢量(-75.948, -2.429, 80.614), 矢量(-62.350, -1.430, 54.457), 矢量(-83.525, -2.428, 71.002),
			矢量(-89.500, -2.430, 67.937), 矢量(-89.172, -2.430, 78.443), 矢量(-118.468, -0.430, 56.971), 矢量(-83.376, -0.916, 28.143), 矢量(
			-87.687, 1.629, 19.072));
		全局.Healthkits_Small = 数组(矢量(20.840, -0.430, 55.596), 矢量(16.939, -2.430, 94.748), 矢量(-13.976, -1.430, 117.541), 矢量(-15.840, -2.430,
			78.587), 矢量(-30.393, -0.430, 53.872), 矢量(-65.422, 3.570, 83.113), 矢量(-69.632, -0.430, 46.764), 矢量(-109.866, -0.430, 55.291),
			矢量(-96.973, -0.430, 33.606));
		全局.Healthkits_Large = 数组(矢量(-39.628, -1.430, 24.338), 矢量(-8.106, -2.590, 37.492), 矢量(17.732, -3.427, 45.712), 矢量(-33.316, -2.430,
			88.370), 矢量(-64.234, -2.430, 82.749), 矢量(-73.366, -0.930, 32.706), 矢量(-91.409, -2.430, 63.145));
		全局.Staircase_Middle = 数组(0, 0, 0, 0, 0, 0, 矢量(-53.266, 1.570, 26.263), 0, 矢量(11.338, -0.430, 80.661), 0, 0, 0, 0, 0, 0, 矢量(-38.321,
			-0.430, 83.606), 0, 0, 矢量(-78.859, -0.430, 86.015), 矢量(-64.903, -0.602, 52.896), 0, 0, 矢量(-93.567, -0.424, 84.709), 0, 0, 0);
	}
}

禁用 规则("----------------------------------- Nodes ------------------------------------------")
{
	事件
	{
		持续 - 全局;
	}
}

禁用 规则("----------------------------------- illari AI ------------------------------------------")
{
	事件
	{
		持续 - 全局;
	}
}

规则("Skip Assembing Time")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		正在集结英雄 == 真;
	}

	动作
	{
		设置比赛时间(地图工坊设置整数(自定义字符串("Game"), 自定义字符串("Assembing Time"), 5, 0, 30, 0));
	}
}

规则("Create Dummy Bot")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		(全局.Defense_Amount_Currently < 全局.Defense_Amount_Desired || 全局.Offense_Amount_Currently < 全局.Offense_Amount_Desired) == 真;
		(正在设置 || 游戏正在进行中) == 真;
	}

	动作
	{
		根据条件跳过(全局.Defense_Amount_Currently >= 全局.Defense_Amount_Desired, 2);
		生成机器人(英雄(伊拉锐), 队伍1, 5 + 全局.Defense_Amount_Currently, 数组随机取值(重生点(队伍1)), 空);
		全局.Defense_Amount_Currently += 1;
		根据条件跳过(全局.Offense_Amount_Currently >= 全局.Offense_Amount_Desired, 2);
		生成机器人(英雄(伊拉锐), 队伍2, 5 + 全局.Offense_Amount_Currently, 数组随机取值(重生点(队伍2)), 空);
		全局.Offense_Amount_Currently += 1;
		等待(较大(服务器负载 / 1000, 0.100), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Destroy Dummy Bot")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		(全局.Defense_Amount_Currently < 全局.Defense_Amount_Desired || 全局.Offense_Amount_Currently < 全局.Offense_Amount_Desired) == 真;
	}

	动作
	{
		根据条件跳过(全局.Defense_Amount_Currently <= 全局.Defense_Amount_Desired, 2);
		全局.Defense_Amount_Currently -= 1;
		移除机器人(队伍1, 5 + 全局.Defense_Amount_Currently);
		根据条件跳过(全局.Offense_Amount_Currently <= 全局.Offense_Amount_Desired, 2);
		全局.Offense_Amount_Currently -= 1;
		移除机器人(队伍2, 5 + 全局.Offense_Amount_Currently);
		等待(较大(服务器负载 / 1000, 0.100), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Setup Bots")
{
	事件
	{
		玩家加入比赛;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		开始定向阈值(事件玩家, 在视线内(眼睛位置(事件玩家), 事件玩家.Walk_To_Position, 屏障不会阻挡视线) ? (相距距离(事件玩家, 事件玩家.Walk_To_Position) < 事件玩家.Walk_Min ? 方向(
			事件玩家.Walk_To_Position, 事件玩家) : 方向(事件玩家, 事件玩家.Walk_To_Position)) : 方向(所选位置(事件玩家), 事件玩家.Current_Node), (相距距离(事件玩家,
			事件玩家.Walk_To_Position) < 事件玩家.Walk_Min || 相距距离(事件玩家, 事件玩家.Walk_To_Position) > 事件玩家.Walk_Max) && 在视线内(眼睛位置(事件玩家),
			事件玩家.Walk_To_Position, 屏障不会阻挡视线) ? 1 : (在视线内(眼睛位置(事件玩家), 事件玩家.Walk_To_Position, 屏障不会阻挡视线) ? 0 : 1), 至地图, 替换现有阈值, 方向和幅度);
		开始朝向(事件玩家, 实体存在(首个(事件玩家.Target_Order)) ? 方向(眼睛位置(事件玩家), !具有状态(首个(事件玩家.Target_Order), 击倒) && !具有状态(首个(事件玩家.Target_Order), 沉睡)
			? 眼睛位置(首个(事件玩家.Target_Order)) : 所选位置(首个(事件玩家.Target_Order))) : (在视线内(眼睛位置(事件玩家), 事件玩家.Walk_To_Position, 屏障不会阻挡视线) ? 方向(眼睛位置(
			事件玩家), 事件玩家.Walk_To_Position) : 方向(眼睛位置(事件玩家), 事件玩家.Current_Node)), 对任意为“真”(数组(具有状态(事件玩家, 击倒), 具有状态(事件玩家, 沉睡), 具有状态(事件玩家, 冰冻),
			具有状态(事件玩家, 击晕)), 当前数组元素 == 真) ? 0 : (幅值(阈值(事件玩家)) == 0 && !实体存在(首个(事件玩家.Target_Order)) ? 0 : 325), 至地图, 方向及角速率);
		追踪玩家变量频率(事件玩家, Ignore_Lower_Nodes, 0, 1, 速率及最终值);
	}
}

规则("Targeting List")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		存活(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Targets = 已过滤的数组(所有存活玩家(对方队伍(所在队伍(事件玩家))), 在视线内(眼睛位置(事件玩家), 眼睛位置(当前数组元素), 屏障不会阻挡视线) == 真);
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, 正在复制的英雄(当前数组元素) == 英雄(黑影) || 所用英雄(当前数组元素) == 英雄(黑影) ? 正在使用技能 1(当前数组元素)
			&& !正在使用辅助武器(当前数组元素) && 相距距离(事件玩家, 当前数组元素) > 3 : 死亡(当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, 具有状态(当前数组元素, 无敌)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, 具有状态(当前数组元素, 相移)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(D.Va) || 所用英雄(当前数组元素) == 英雄(D.Va)) && 正在使用辅助武器(
			当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(西格玛) || 所用英雄(当前数组元素) == 英雄(西格玛)) && 正在使用技能 1(
			当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(奥丽莎) || 所用英雄(当前数组元素) == 英雄(奥丽莎)) && 正在使用技能 2(
			当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(源氏) || 所用英雄(当前数组元素) == 英雄(源氏)) && 正在使用技能 2(当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(死神) || 所用英雄(当前数组元素) == 英雄(死神)) && 正在使用技能 1(当前数组元素)));
		修改玩家变量(事件玩家, Targets, 添加至数组, 已过滤的数组(所有存活玩家(所在队伍(事件玩家)), 标准化生命值(当前数组元素) < 1 && !正在使用终极技能(事件玩家)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, !已重生(当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(末日铁拳) || 所用英雄(当前数组元素) == 英雄(末日铁拳)) && 正在使用终极技能(
			当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(美) || 所用英雄(当前数组元素) == 英雄(美)) && 正在使用技能 1(当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(莫伊拉) || 所用英雄(当前数组元素) == 英雄(莫伊拉)) && 正在使用技能 1(
			当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(猎空) || 所用英雄(当前数组元素) == 英雄(猎空)) && 正在使用技能 2(当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, (正在复制的英雄(当前数组元素) == 英雄(禅雅塔) || 所用英雄(当前数组元素) == 英雄(禅雅塔)) && 正在使用终极技能(
			当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 已过滤的数组(事件玩家.Targets, 死亡(当前数组元素)));
		修改玩家变量(事件玩家, Targets, 根据值从数组中移除, 事件玩家);
		事件玩家.Targets = 已排序的数组(事件玩家.Targets, 相距距离(事件玩家, 当前数组元素) * 标准化生命值(当前数组元素));
		事件玩家.Target_Order = 已排序的数组(事件玩家.Targets, 标准化生命值(当前数组元素) * (所在队伍(事件玩家) == 所在队伍(当前数组元素) && 在视线内(眼睛位置(事件玩家), 眼睛位置(当前数组元素), 屏障不会阻挡视线)
			&& 标准化生命值(当前数组元素) < 0.600 && 事件玩家.Secondary_Charge > 25 ? 1 : 2));
		等待(较大(服务器负载 / 1000, 0.100), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Fire Primary")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		实体存在(首个(事件玩家.Target_Order)) == 真;
		在视线内(眼睛位置(事件玩家), 眼睛位置(首个(事件玩家.Target_Order)), 屏障不会阻挡视线) == 真;
		所在队伍(事件玩家) != 所在队伍(首个(事件玩家.Target_Order));
		地图工坊设置开关(自定义字符串("AI"), 自定义字符串("Solar Rifle Primary"), 真, -4) == 真;
	}

	动作
	{
		按下按键(事件玩家, 按钮(主要攻击模式));
		等待(较大(服务器负载 / 1000, 随机实数(0.800, 1.200)), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Start Firing Secondary")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		实体存在(首个(事件玩家.Target_Order)) == 真;
		在视线内(眼睛位置(事件玩家), 眼睛位置(首个(事件玩家.Target_Order)), 屏障不会阻挡视线) == 真;
		所在队伍(事件玩家) == 所在队伍(首个(事件玩家.Target_Order));
		相距距离(事件玩家, 首个(事件玩家.Target_Order)) < 15;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) != 真;
		地图工坊设置开关(自定义字符串("AI"), 自定义字符串("Solar Rifle Secondary"), 真, -3) == 真;
		事件玩家.Secondary_Charge >= 25;
	}

	动作
	{
		开始按下按钮(事件玩家, 按钮(辅助攻击模式));
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Stop Firing Secondary")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		对任意为“真”(数组(!在视线内(眼睛位置(事件玩家), 眼睛位置(首个(事件玩家.Target_Order)), 屏障不会阻挡视线), !实体存在(首个(事件玩家.Target_Order)), 所在队伍(事件玩家) != 所在队伍(首个(
			事件玩家.Target_Order)), 相距距离(事件玩家, 首个(事件玩家.Target_Order)) > 15, 事件玩家.Secondary_Charge <= 5), 当前数组元素) == 真;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(辅助攻击模式));
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Use Outburst (Mobility, Speed)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		实体存在(首个(事件玩家.Target_Order)) != 真;
		相距距离(事件玩家, 事件玩家.Current_Node) > 10;
		按钮被按下(事件玩家, 按钮(技能1)) != 真;
		全局.Use_Outbrust == 真;
		技能冷却时间(事件玩家, 按钮(技能1)) == 空;
	}

	动作
	{
		按下按键(事件玩家, 按钮(技能1));
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Use Outburst (Mobility, Height)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		实体存在(首个(事件玩家.Target_Order)) != 真;
		相距距离(事件玩家, 事件玩家.Current_Node) <= 10;
		按钮被按下(事件玩家, 按钮(技能1)) != 真;
		全局.Use_Outbrust == 真;
		技能冷却时间(事件玩家, 按钮(技能1)) == 空;
		Y方向分量(所选位置(事件玩家)) + 2.750 < Y方向分量(事件玩家.Current_Node);
	}

	动作
	{
		开始按下按钮(事件玩家, 按钮(技能1));
		等待(0.250, 无视条件);
		停止按下按钮(事件玩家, 按钮(技能1));
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Use Outburst (Offensive)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		实体存在(首个(事件玩家.Target_Order)) == 真;
		按钮被按下(事件玩家, 按钮(技能1)) != 真;
		全局.Use_Outbrust == 真;
		技能冷却时间(事件玩家, 按钮(技能1)) == 空;
		指定方向速度(事件玩家, 方向(事件玩家, 首个(事件玩家.Target_Order))) < 0;
		相距距离(事件玩家, 首个(事件玩家.Target_Order)) <= 12;
		所在队伍(事件玩家) != 所在队伍(首个(事件玩家.Target_Order));
	}

	动作
	{
		按下按键(事件玩家, 按钮(技能1));
		等待(较大(服务器负载 / 1000, 0.500), 无视条件);
		如条件为“真”则循环;
	}
}

规则("Use Healing Pylon")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		地图工坊设置开关(自定义字符串("AI"), 自定义字符串("Healing Pylon"), 真, -1) == 真;
		技能冷却时间(事件玩家, 按钮(技能2)) == 空;
		实体存在(首个(事件玩家.Target_Order)) == 真;
	}

	动作
	{
		停止朝向(事件玩家);
		设置朝向(事件玩家, 下, 至地图);
		按下按键(事件玩家, 按钮(技能2));
		等待(0.100, 无视条件);
		开始朝向(事件玩家, 实体存在(首个(事件玩家.Target_Order)) ? 方向(眼睛位置(事件玩家), !具有状态(首个(事件玩家.Target_Order), 击倒) && !具有状态(首个(事件玩家.Target_Order), 沉睡)
			? 眼睛位置(首个(事件玩家.Target_Order)) : 所选位置(首个(事件玩家.Target_Order))) : (在视线内(眼睛位置(事件玩家), 事件玩家.Walk_To_Position, 屏障不会阻挡视线) ? 方向(眼睛位置(
			事件玩家), 事件玩家.Walk_To_Position) : 方向(眼睛位置(事件玩家), 事件玩家.Current_Node)), 对任意为“真”(数组(具有状态(事件玩家, 击倒), 具有状态(事件玩家, 沉睡), 具有状态(事件玩家, 冰冻),
			具有状态(事件玩家, 击晕)), 当前数组元素 == 真) ? 0 : (幅值(阈值(事件玩家)) == 0 && !实体存在(首个(事件玩家.Target_Order)) ? 0 : 325), 至地图, 方向及角速率);
	}
}

规则("Use Captive Sun")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		地图工坊设置开关(自定义字符串("AI"), 自定义字符串("Captive Sun"), 真, 0) == 真;
		终极技能充能百分比(事件玩家) == 100;
		数量(已过滤的数组(事件玩家.Target_Order, 所在队伍(事件玩家) != 所在队伍(当前数组元素))) >= 较小(3, 玩家数量(对方队伍(所在队伍(事件玩家))));
	}

	动作
	{
		按下按键(事件玩家, 按钮(终极技能));
	}
}

规则("Track Secondary Charge (Using)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		逐帧更新(正在使用辅助武器(事件玩家)) == 真;
	}

	动作
	{
		停止追踪玩家变量(事件玩家, Secondary_Charge);
		追踪玩家变量频率(事件玩家, Secondary_Charge, 0, 33.333, 速率及最终值);
		等待直到 (事件玩家.Secondary_Charge == 0 || 逐帧更新(!正在使用辅助武器(事件玩家)), 99999);
		停止追踪玩家变量(事件玩家, Secondary_Charge);
		If(事件玩家.Secondary_Charge == 0);
			事件玩家.Secondary_Charge = -1;
		End;
	}
}

规则("Track Secondary Charge (Charging)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
		逐帧更新(!正在使用辅助武器(事件玩家)) == 真;
	}

	动作
	{
		If(事件玩家.Secondary_Charge == -1);
			等待(3.360, 无视条件);
			事件玩家.Secondary_Charge = 100;
		Else;
			等待(0.240, 当为“假”时中止);
			追踪玩家变量频率(事件玩家, Secondary_Charge, 100, 34.483, 速率及最终值);
		End;
	}
}